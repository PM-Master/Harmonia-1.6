/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ProcessHandler.java
 *
 * Created on Oct 19, 2010, 5:11:57 PM
 */
package gov.nist.csd.pm.user.platform.win32;

import com.sun.jna.Pointer;
import com.sun.jna.platform.win32.Kernel32;
import com.sun.jna.platform.win32.User32;
import com.sun.jna.platform.win32.WinDef.HWND;
import com.sun.jna.platform.win32.WinUser.WNDENUMPROC;
import com.sun.jna.ptr.IntByReference;

import javax.swing.*;
import javax.swing.Timer;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;

/**
 * Class for testing out some Windows API functionality
 * Provided as a basis for future additions to the application.
 * NO USE in the current POLCY MACHINE.
 *
 * Also, this code is not actively maintained beyond fixing the occasional compiler error.
 * @author Administrator
 */
public class ProcessHandler extends javax.swing.JFrame {

    private void getOrderedWindowList(final Map<String, HWND> windowNameMap, User32Ext myuser32, int count, final List<String> windowList) {
        for (String windowName : windowNameMap.keySet()) {
            IntByReference ibr = new IntByReference();
            myuser32.GetWindowThreadProcessId(windowNameMap.get(windowName), ibr);
            System.out.println(count++ + ". " + windowName + " : " + ibr.getValue());
            windowList.add(windowName);
        }
    }

    private void getWindowNameMap(final List<HWND> windows, User32 user32, final Map<String, HWND> windowNameMap) {
        getWindows(user32, windows);
        for (HWND window : windows) {
            int value = user32.GetWindowTextLength(window);
            char[] name = new char[value + 1];
            user32.GetWindowText(window, name, value + 1);
            windowNameMap.put(new String(name).substring(0, name.length - 1), window);
        }
    }

    private void getWindows(User32 user32, final List<HWND> windows) {
        user32.EnumWindows(new WNDENUMPROC() {

            @Override
            public boolean callback(HWND hwnd, Pointer pntr) {
                windows.add(hwnd);
                return true;
            }
        }, Pointer.NULL);
    }

    public void setWindowNameMap(Map<String, HWND> nameWindowMap) {
        this.nameWindowMap = nameWindowMap;
    }

    public void prepareAndShow() {
        repopulateNameWindowMap();
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                Timer refreshTimer = new Timer(3000, new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent ae) {
                        ProcessHandler.this.repopulateNameWindowMap();
                    }
                });
                refreshTimer.start();
                ProcessHandler.this.setVisible(true);
            }
        });
    }

    private void repopulateNameWindowMap() {
        final List<HWND> windows = new ArrayList<HWND>();
        nameWindowMap = new HashMap<String, HWND>();
        User32 user32 = User32.INSTANCE;
        User32Ext myuser32 = User32Ext.INSTANCE;
        Kernel32 k32 = Kernel32.INSTANCE;
        getWindowNameMap(windows, user32, nameWindowMap);
        for (ListDataListener listener : ((AbstractListModel) this.jList1.getModel()).getListDataListeners()) {
            listener.contentsChanged(new ListDataEvent(this, ListDataEvent.CONTENTS_CHANGED, 0, nameWindowMap.keySet().size() - 1));
        }
        //this.jScrollPane1.revalidate();
        //this.jScrollPane1.repaint();
    }
    /**
	 * @uml.property  name="nameWindowMap"
	 * @uml.associationEnd  qualifier="toString:java.lang.String com.sun.jna.platform.win32.WinDef$HWND"
	 */
    private Map<String, HWND> nameWindowMap;

    /** Creates new form ProcessHandler */
    public ProcessHandler() {
        initComponents();
        jList1.setModel(new AbstractListModel() {

            @Override
            public int getSize() {
                //System.out.println("Returning size of list " + nameWindowMap.keySet().size());
                return nameWindowMap.keySet().size();
            }

            @Override
            public Object getElementAt(int i) {
                List<String> windowNames = new ArrayList<String>(nameWindowMap.keySet());
                Collections.sort(windowNames);
                //System.out.println("Returning: " + windowNames.get(i));
                return windowNames.get(i);
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jButton1.setText("Switch");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
                    .addComponent(jButton1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Object selection = jList1.getSelectedValue();
        HWND windle = nameWindowMap.get(selection.toString());
        bringHandleToFront(windle);
    }//GEN-LAST:event_jButton1ActionPerformed

    public void bringHandleToFront(HWND selectedWindow) {
        User32 user32 = User32.INSTANCE;
        User32Ext myuser32 = User32Ext.INSTANCE;
        Kernel32 k32 = Kernel32.INSTANCE;
        boolean result = true;
        int foreThread = myuser32.GetWindowThreadProcessId(myuser32.GetForegroundWindow(), null);
        int targetThread = myuser32.GetWindowThreadProcessId(selectedWindow, null);
        int appThread = k32.GetCurrentThreadId();
        if (SwingUtilities.isEventDispatchThread()) {
            System.out.println("is the event dispatch thread.");
        }
        if (foreThread != appThread) {
            System.out.printf("Proc Handler: Fore %d App %d target %d\n", foreThread, appThread, targetThread);
            System.out.println("Selected window name " + User32ExtUtil.getWindowText(selectedWindow));
            System.out.println("Foreground and app thread different.");
            result = myuser32.AttachThreadInput(appThread, foreThread, true);
            result = myuser32.AttachThreadInput(targetThread, appThread, true);
            processResult(result, "AttachThreadInput");
            result = myuser32.ShowWindow(selectedWindow, WinUserExt.SW_RESTORE);
            //result = myuser32.BringWindowToTop(selectedWindow);
            result = myuser32.SetForegroundWindow(selectedWindow);

            //myuser32.SwitchToThisWindow(selectedWindow, false);
            //myuser32.BringWindowToTop(selectedWindow);
            //processResult(result, "BringWindowToTop");
            result = myuser32.AttachThreadInput(appThread, foreThread, false);
            result = myuser32.AttachThreadInput(targetThread, appThread, false);
            processResult(result, "DetachThreadInput");
        } else {
            System.out.println("Foreground and app thread alike.");
            result = myuser32.SetForegroundWindow(selectedWindow);
            processResult(result, "SetForegroundWindow");

        }
    }

    private void processResult(boolean result, String string) {
        if (result) {
            System.out.println("Call Successful: " + string);
        } else {
            System.out.println("Call Failed: " + string);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new ProcessHandler().prepareAndShow();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    /**
	 * @uml.property  name="jButton1"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JButton jButton1;
    /**
	 * @uml.property  name="jList1"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JList jList1;
    /**
	 * @uml.property  name="jScrollPane1"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
