Comparing files PmEngine.java and ..\OLDPMSERVER\PMENGINE.JAVA
***** PmEngine.java
  public static final String PM_UATTR_CREATE_USER = "User attribute create user";
  public static final String PM_UATTR_CREATE_OPSET = "User attribute create operation set";
***** ..\OLDPMSERVER\PMENGINE.JAVA
  public static final String PM_UATTR_CREATE_USER = "User attribute create user";
  public static final String PM_UATTR_DELETE_USER = "User attribute delete user";
  public static final String PM_UATTR_CREATE_OPSET = "User attribute create operation set";
*****

***** PmEngine.java
  private String sUattrOps[] = {PM_UATTR_CREATE_UATTR, PM_UATTR_CREATE_USER,
                                PM_UATTR_CREATE_OPSET, PM_UATTR_ASSIGN_TO_OPSET,
***** ..\OLDPMSERVER\PMENGINE.JAVA
  private String sUattrOps[] = {PM_UATTR_CREATE_UATTR, PM_UATTR_CREATE_USER,
                                PM_UATTR_DELETE_USER,
                                PM_UATTR_CREATE_OPSET, PM_UATTR_ASSIGN_TO_OPSET,
*****

***** PmEngine.java
  public static final String PM_OATTR_CREATE_OBJ = "Object attribute create object";
  public static final String PM_OATTR_CREATE_OATTR = "Object attribute create object attribute";
  public static final String PM_OATTR_CREATE_OPSET = "Object attribute create operation set";
***** ..\OLDPMSERVER\PMENGINE.JAVA
  public static final String PM_OATTR_CREATE_OBJ = "Object attribute create object";
  public static final String PM_OATTR_DELETE_OBJ = "Object attribute delete object";
  public static final String PM_OATTR_CREATE_OATTR = "Object attribute create object attribute";
  public static final String PM_OATTR_DELETE_OATTR = "Object attribute delete object attribute";
  public static final String PM_OATTR_CREATE_OPSET = "Object attribute create operation set";
*****

***** PmEngine.java

  private String sOattrOps[] = {PM_OATTR_CREATE_OBJ, PM_OATTR_CREATE_OATTR,
                                PM_OATTR_CREATE_OPSET, PM_OATTR_ASSIGN,
***** ..\OLDPMSERVER\PMENGINE.JAVA

  private String sOattrOps[] = {PM_OATTR_CREATE_OBJ, PM_OATTR_DELETE_OBJ,
                                PM_OATTR_CREATE_OATTR, PM_OATTR_DELETE_OATTR,
                                PM_OATTR_CREATE_OPSET, PM_OATTR_ASSIGN,
*****

***** PmEngine.java
  public static final String PM_POL_CREATE_UATTR = "Policy class create user attribute";
  public static final String PM_POL_CREATE_OATTR = "Policy class create object attribute";
  public static final String PM_POL_CREATE_OBJ = "Policy class create object";
***** ..\OLDPMSERVER\PMENGINE.JAVA
  public static final String PM_POL_CREATE_UATTR = "Policy class create user attribute";
  public static final String PM_POL_DELETE_UATTR = "Policy class delete user attribute";
  public static final String PM_POL_CREATE_OATTR = "Policy class create object attribute";
  public static final String PM_POL_DELETE_OATTR = "Policy class delete object attribute";
  public static final String PM_POL_CREATE_OBJ = "Policy class create object";
*****

***** PmEngine.java

  private String sPolOps[] = {PM_POL_CREATE_UATTR, PM_POL_CREATE_OATTR,
                              PM_POL_CREATE_OBJ, PM_POL_ASSIGN,
***** ..\OLDPMSERVER\PMENGINE.JAVA

  private String sPolOps[] = {PM_POL_CREATE_UATTR, PM_POL_DELETE_UATTR,
                              PM_POL_CREATE_OATTR, PM_POL_DELETE_OATTR,
                              PM_POL_CREATE_OBJ, PM_POL_ASSIGN,
*****

***** PmEngine.java
  public static final String PM_CONN_CREATE_POL = "Connector create policy class";
  public static final String PM_CONN_CREATE_USER = "Connector create user";
  public static final String PM_CONN_CREATE_UATTR = "Connector create user attribute";
  public static final String PM_CONN_CREATE_OATTR = "Connector create object attribute";
  public static final String PM_CONN_CREATE_OBJ = "Connector create object";
***** ..\OLDPMSERVER\PMENGINE.JAVA
  public static final String PM_CONN_CREATE_POL = "Connector create policy class";
  public static final String PM_CONN_DELETE_POL = "Connector delete policy class";
  public static final String PM_CONN_CREATE_USER = "Connector create user";
  public static final String PM_CONN_DELETE_USER = "Connector delete user";
  public static final String PM_CONN_CREATE_UATTR = "Connector create user attribute";
  public static final String PM_CONN_DELETE_UATTR = "Connector delete user attribute";
  public static final String PM_CONN_CREATE_OATTR = "Connector create object attribute";
  public static final String PM_CONN_DELETE_OATTR = "Connector delete object attribute";
  public static final String PM_CONN_CREATE_OBJ = "Connector create object";
*****

***** PmEngine.java

  private String sConnOps[] = {PM_CONN_CREATE_POL, PM_CONN_CREATE_USER,
                               PM_CONN_CREATE_UATTR, PM_CONN_CREATE_OATTR,
                               PM_CONN_CREATE_OBJ, PM_CONN_CREATE_OPSET,
***** ..\OLDPMSERVER\PMENGINE.JAVA

  private String sConnOps[] = {PM_CONN_CREATE_POL, PM_CONN_DELETE_POL,
                               PM_CONN_CREATE_USER, PM_CONN_DELETE_USER,
                               PM_CONN_CREATE_UATTR, PM_CONN_DELETE_UATTR,
                               PM_CONN_CREATE_OATTR, PM_CONN_DELETE_OATTR,
                               PM_CONN_CREATE_OBJ, PM_CONN_CREATE_OPSET,
*****

***** PmEngine.java
  public static final String PM_DENY         = "deny";
  public static final String PM_DENY_USER_ID = "user id";
***** ..\OLDPMSERVER\PMENGINE.JAVA
  public static final String PM_DENY         = "deny";
  
  public static final String PM_DENY_USER_ID = "user id";
*****

***** PmEngine.java
  public static final String PM_DENY_ATTR_OVERALL = "attr overall";
  public static final String PM_FUN          = "f";
***** ..\OLDPMSERVER\PMENGINE.JAVA
  public static final String PM_DENY_ATTR_OVERALL = "attr overall";
  
  public static final String PM_FUN          = "f";
*****

***** PmEngine.java
  public static final String PM_THRESHOLD    = "th";
  
***** ..\OLDPMSERVER\PMENGINE.JAVA
  public static final String PM_THRESHOLD    = "th";
  public static final String PM_LABEL        = "l";
  
*****

***** PmEngine.java
  
  
***** ..\OLDPMSERVER\PMENGINE.JAVA
  
  public static final String PM_VOS_PRES_ADMIN = "admin";
  public static final String PM_VOS_PRES_USER = "user";
  
*****

***** PmEngine.java
  private String sVosNodeContainerDN;
  private String sObjAttrContainerDN;
***** ..\OLDPMSERVER\PMENGINE.JAVA
  private String sVosNodeContainerDN;
  private String sAdminVosNodeContainerDN;
  private String sObjAttrContainerDN;
*****

***** PmEngine.java

  private String sAttrSetClass;
***** ..\OLDPMSERVER\PMENGINE.JAVA

  // AD Classes
  private String sAttrSetClass;
*****

***** PmEngine.java
  private String sConditionClass;
  private String sLastDenyClass;
  private String sHostClass;
***** ..\OLDPMSERVER\PMENGINE.JAVA
  private String sConditionClass;
  private String sDenyClass;
  private String sHostClass;
*****

***** PmEngine.java
  private String sVosNodeClass;
  private String sObjAttrClass;
***** ..\OLDPMSERVER\PMENGINE.JAVA
  private String sVosNodeClass;
  private String sAdminVosNodeClass;
  private String sObjAttrClass;
*****

***** PmEngine.java

  private Hashtable env = null;
***** ..\OLDPMSERVER\PMENGINE.JAVA

  // The enabled EVER script id.
  private String sEnabledScriptId;
  
  private Hashtable env = null;
*****

***** PmEngine.java
    sVosNodeContainerDN = "CN=PmVosNodeContainer," + sThisDomain;
    sVirtualObjContainerDN = "CN=PmVirtualObjContainer," + sThisDomain;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    sVosNodeContainerDN = "CN=PmVosNodeContainer," + sThisDomain;
    sAdminVosNodeContainerDN = "CN=PmAdminVosNodeContainer," + sThisDomain;
    sVirtualObjContainerDN = "CN=PmVirtualObjContainer," + sThisDomain;
*****

***** PmEngine.java
      sConnectorClass = getPmClassName("ConnectorClassName");
      sLastDenyClass = getPmClassName("DenyClassName");
      sHostClass = getPmClassName("HostClassName");
***** ..\OLDPMSERVER\PMENGINE.JAVA
      sConnectorClass = getPmClassName("ConnectorClassName");
      sDenyClass = getPmClassName("DenyClassName");
      sHostClass = getPmClassName("HostClassName");
*****

***** PmEngine.java
      sVosNodeClass = getPmClassName("VosNodeClassName");
      sVirtualObjClass = getPmClassName("VirtualObjectClassName");
***** ..\OLDPMSERVER\PMENGINE.JAVA
      sVosNodeClass = getPmClassName("VosNodeClassName");
      sAdminVosNodeClass = getPmClassName("AdminVosNodeClassName");
      sVirtualObjClass = getPmClassName("VirtualObjectClassName");
*****

***** PmEngine.java
*/
bPass = "pmengine".toCharArray();

***** ..\OLDPMSERVER\PMENGINE.JAVA
*/
bPass = "curcubeu".toCharArray();

*****

***** PmEngine.java
    sThisDomain = getDefaultNamingContext();
    //if (debugFlag) System.out.println(sThisDomain);
    if (sThisDomain == null) {
***** ..\OLDPMSERVER\PMENGINE.JAVA
    sThisDomain = getDefaultNamingContext();
    
    if (sThisDomain == null) {
*****

***** PmEngine.java
      sObjName = PM_CONNECTOR_NAME;
      if (!entityIdExists(PM_CONNECTOR_ID, PM_NODE_CONN)) {
        attrs = new BasicAttributes(true); // true means ignoreCase
***** ..\OLDPMSERVER\PMENGINE.JAVA
      sObjName = PM_CONNECTOR_NAME;
      if (!entityExists(PM_CONNECTOR_ID, PM_NODE_CONN)) {
        attrs = new BasicAttributes(true); // true means ignoreCase
*****

***** PmEngine.java
      sObjName = PM_ADMIN_NAME;
      if (!entityIdExists(PM_ADMIN_ID, PM_NODE_POL)) {
        res = (ArrayList)addPcInternal(PM_ADMIN_NAME, PM_ADMIN_ID,
***** ..\OLDPMSERVER\PMENGINE.JAVA
      sObjName = PM_ADMIN_NAME;
      if (!entityExists(PM_ADMIN_ID, PM_NODE_POL)) {
        res = (ArrayList)addPcInternal(PM_ADMIN_NAME, PM_ADMIN_ID,
*****

***** PmEngine.java
      sObjName = PM_SUPER_ADMIN_NAME;
      if (!entityIdExists(PM_SUPER_ADMIN_ID, PM_NODE_UATTR)) {
        attrs = new BasicAttributes(true); // true means ignoreCase
***** ..\OLDPMSERVER\PMENGINE.JAVA
      sObjName = PM_SUPER_ADMIN_NAME;
      if (!entityExists(PM_SUPER_ADMIN_ID, PM_NODE_UATTR)) {
        attrs = new BasicAttributes(true); // true means ignoreCase
*****

***** PmEngine.java
      sObjName = PM_SUPER_NAME;
      if (!entityIdExists(PM_SUPER_ID, PM_NODE_USER)) {
        res = (ArrayList)addUserInternal(PM_SUPER_NAME, PM_SUPER_ID, PM_SUPER_NAME,
***** ..\OLDPMSERVER\PMENGINE.JAVA
      sObjName = PM_SUPER_NAME;
      if (!entityExists(PM_SUPER_ID, PM_NODE_USER)) {
        res = (ArrayList)addUserInternal(PM_SUPER_NAME, PM_SUPER_ID, PM_SUPER_NAME,
*****

***** PmEngine.java
      sObjName = PM_EVERYTHING_NAME;
      if (!entityIdExists(PM_EVERYTHING_ID, PM_OBJ)) {
        res = (ArrayList)addObjectInternal(PM_EVERYTHING_NAME, PM_EVERYTHING_ID,
***** ..\OLDPMSERVER\PMENGINE.JAVA
      sObjName = PM_EVERYTHING_NAME;
      if (!entityExists(PM_EVERYTHING_ID, PM_OBJ)) {
        res = (ArrayList)addObjectInternal(PM_EVERYTHING_NAME, PM_EVERYTHING_ID,
*****

***** PmEngine.java
      sObjName = PM_ALL_OPS_NAME;
      if (!entityIdExists(PM_ALL_OPS_ID, PM_NODE_OPSET)) {
        res = (ArrayList)addOpsetAndOpInternal(PM_ALL_OPS_NAME, PM_ALL_OPS_ID,
***** ..\OLDPMSERVER\PMENGINE.JAVA
      sObjName = PM_ALL_OPS_NAME;
      if (!entityExists(PM_ALL_OPS_ID, PM_NODE_OPSET)) {
        res = (ArrayList)addOpsetAndOpInternal(PM_ALL_OPS_NAME, PM_ALL_OPS_ID,
*****

***** PmEngine.java
      }
      
      // Create a host for the computer where the engine is running.
      sObjName = "engine host";
      InetAddress ia = InetAddress.getLocalHost();
***** ..\OLDPMSERVER\PMENGINE.JAVA
      }

      // If a host for the computer where the engine is running does not exist,
      // create one.
      InetAddress ia = InetAddress.getLocalHost();
*****

***** PmEngine.java
      if (!entityNameExists(pieces[0], PM_HOST)) {
        res = (ArrayList)addHost(PM_SUPER_ID, pieces[0], "Ignored", "Ignored",
          "Ignored", "Engine host", "true");
***** ..\OLDPMSERVER\PMENGINE.JAVA
      if (!entityNameExists(pieces[0], PM_HOST)) {
        res = (ArrayList)addHost(PM_SUPER_ID, pieces[0], "Ignored", "Ignored", 
          "Ignored", "Engine host", "true");
*****

***** PmEngine.java
        }
      }
    } catch (CommunicationException e) {
***** ..\OLDPMSERVER\PMENGINE.JAVA
        }
      }      
    } catch (CommunicationException e) {
*****

***** PmEngine.java

    if (entityIdExists(sClassId, PM_OBJ_CLASS)) return;
    attrs = new BasicAttributes(true); // true means ignoreCase
***** ..\OLDPMSERVER\PMENGINE.JAVA

    if (entityExists(sClassId, PM_OBJ_CLASS)) return;
    attrs = new BasicAttributes(true); // true means ignoreCase
*****

***** PmEngine.java
        }
        String crtSessionId = getArgument(cmd, 1, true);
        String sName = getArgument(cmd, 2, true);
***** ..\OLDPMSERVER\PMENGINE.JAVA
        }
        String sSessId = getArgument(cmd, 1, true);
        String sName = getArgument(cmd, 2, true);
*****

***** PmEngine.java
        String[] sProps = getItemsFrom(cmd, 10);
        return addPc(sClientId, sName, sDescr, sInfo, sProps);

***** ..\OLDPMSERVER\PMENGINE.JAVA
        String[] sProps = getItemsFrom(cmd, 10);
        return addPc(sSessId, sName, sDescr, sInfo, sProps);

*****

***** PmEngine.java
      } else if (sCmdId.equalsIgnoreCase("getPcInfo")) {
        if (getArgumentCount(cmd) < 2) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
      } else if (sCmdId.equalsIgnoreCase("getPcInfo")) {
        if (getArgumentCount(cmd) < 3) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sPcId = getArgument(cmd, 2, true);
        return getPcInfo(sSessId, sPcId);

***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sPcId = getArgument(cmd, 2, true);
        String sIsVos = getArgument(cmd, 3, true);
        return getPcInfo(sSessId, sPcId, sIsVos);

*****

***** PmEngine.java
      } else if (sCmdId.equalsIgnoreCase("addUattr")) {
        if (getArgumentCount(cmd) < 6) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
      } else if (sCmdId.equalsIgnoreCase("addUattr")) {
        if (getArgumentCount(cmd) < 7) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sBaseType = getArgument(cmd, 6, true);
        // The properties start at item 14:
        // 0 = cmd code, 1 = sep, 2 = sess, 3 = sep, 4 = name, 5 = sep,
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sBaseType = getArgument(cmd, 6, true);
        String sBaseIsVos = getArgument(cmd, 7, true);
        // The properties start at item 16:
        // 0 = cmd code, 1 = sep, 2 = sess, 3 = sep, 4 = name, 5 = sep,
*****

***** PmEngine.java
        // 6 = descr, 7 = sep, 8 = info, 9 = sep, 10 = base, 11 = sep,
        // 12 = base type, 13 = sep.
        String[] sProps = getItemsFrom(cmd, 14);
        return addUattr(sClientId, crtSessionId, sName, sDescr, sInfo, sBaseId, sBaseType, sProps);

***** ..\OLDPMSERVER\PMENGINE.JAVA
        // 6 = descr, 7 = sep, 8 = info, 9 = sep, 10 = base, 11 = sep,
        // 12 = base type, 13 = sep, 14 = is vos, 15 = sep.
        String[] sProps = getItemsFrom(cmd, 16);
        return addUattr(sClientId, crtSessionId, sName, sDescr, sInfo, sBaseId,
        sBaseType, sBaseIsVos, sProps);

*****

***** PmEngine.java
      } else if (sCmdId.equalsIgnoreCase("addOattr")) {
        if (getArgumentCount(cmd) < 6) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
      } else if (sCmdId.equalsIgnoreCase("addOattr")) {
        if (getArgumentCount(cmd) < 7) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sBaseType = getArgument(cmd, 6, true);
        String sAssocObjId = getArgument(cmd, 7, true);
        // When invoked from a client, the assoc object id should be null.
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sBaseType = getArgument(cmd, 6, true);
        String sBaseIsVos = getArgument(cmd, 7, true);
        String sAssocObjId = getArgument(cmd, 8, true);
        // When invoked from a client, the assoc object id should be null.
*****

***** PmEngine.java
        // If no assoc obj id:
        //       item 14 is PM_SEP ==> items 15,... contain props;
        //       item 14 is PM_EOC ==> no props.
        // If there is an assoc obj id:
        //       item 14 is assoc obj id;
        //       item 15 is PM_SEP ==> items 16,... contain props;
        //       item 15 is PM_EOC ==> no props.
        String[] sProps = getItemsFrom(cmd, 15);
        if (sProps == null) System.out.println("sProps is null");
***** ..\OLDPMSERVER\PMENGINE.JAVA
        // If no assoc obj id:
        //       item 16 is PM_SEP ==> items 17,... contain props;
        //       item 16 is PM_EOC ==> no props.
        // If there is an assoc obj id:
        //       item 16 is assoc obj id;
        //       item 17 is PM_SEP ==> items 18,... contain props;
        //       item 17 is PM_EOC ==> no props.
        String[] sProps = getItemsFrom(cmd, 17);
        if (sProps == null) System.out.println("sProps is null");
*****

***** PmEngine.java
        return addOattr(sSessId, sName, sDescr, sInfo, sBaseId, sBaseType,
          sAssocObjId, sProps);

***** ..\OLDPMSERVER\PMENGINE.JAVA
        return addOattr(sSessId, sName, sDescr, sInfo, sBaseId, sBaseType,
          sBaseIsVos, sAssocObjId, sProps);

*****

***** PmEngine.java
        String sType2 = getArgument(cmd, 5, true);
        return assign(sSessId, sId1, sType1, sId2, sType2);

***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sType2 = getArgument(cmd, 5, true);
        String sIsAdminVos = getArgument(cmd, 6, true);
        return assign(sSessId, sId1, sType1, sId2, sType2, sIsAdminVos);

*****

***** PmEngine.java
      } else if (sCmdId.equalsIgnoreCase("deleteAssignment")) {
        if (getArgumentCount(cmd) < 5) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
      } else if (sCmdId.equalsIgnoreCase("deleteAssignment")) {
        if (getArgumentCount(cmd) < 6) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sType2 = getArgument(cmd, 5, true);
        return deleteAssignment(sSessId, sId1, sType1, sId2, sType2);

***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sType2 = getArgument(cmd, 5, true);
        String sIsAdminVos = getArgument(cmd, 6, true);
        return deleteAssignment(sSessId, sId1, sType1, sId2, sType2, sIsAdminVos);

*****

***** PmEngine.java
        String sBaseType = getArgument(cmd, 7, true);
        return addUser(sSessId, sName, sFull, sInfo, sHash, sBaseId, sBaseType);

***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sBaseType = getArgument(cmd, 7, true);
        String sBaseIsVos = getArgument(cmd, 8, true);
        return addUser(sSessId, sName, sFull, sInfo, sHash, sBaseId, sBaseType, sBaseIsVos);

*****

***** PmEngine.java
      } else if (sCmdId.equalsIgnoreCase("deleteNode")) {
        if (getArgumentCount(cmd) < 3) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
      } else if (sCmdId.equalsIgnoreCase("deleteNode")) {
        if (getArgumentCount(cmd) < 4) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sType = getArgument(cmd, 3, true);
        return deleteNode(sClientId, sId, sType);

***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sType = getArgument(cmd, 3, true);
        String sIsVos = getArgument(cmd, 4, true);
        return deleteNode(sClientId, sId, sType, sIsVos);

*****

***** PmEngine.java
      } else if (sCmdId.equalsIgnoreCase("getVosIdProperties")) {
        if (getArgumentCount(cmd) < 2) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
      } else if (sCmdId.equalsIgnoreCase("getVosIdProperties")) {
        if (getArgumentCount(cmd) < 3) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sCrtSessId = getArgument(cmd, 1, true);
        String sVosId = getArgument(cmd, 2, true);
        return getVosIdProperties(sCrtSessId, sVosId);
        
      } else if (sCmdId.equalsIgnoreCase("determineVos")) {
        if (getArgumentCount(cmd) < 3) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sCrtSessId = getArgument(cmd, 1, true);
        String sPresType = getArgument(cmd, 2, true);
        String sVosId = getArgument(cmd, 3, true);
        return getVosIdProperties(sCrtSessId, sPresType, sVosId);
        
      } else if (sCmdId.equalsIgnoreCase("computeVos")) {
        if (getArgumentCount(cmd) < 4) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String crtSessionId = getArgument(cmd, 1, true);
        String sUserId = getArgument(cmd, 2, true);
        String sSessId = getArgument(cmd, 3, true);
        return determineVos(sClientId, sUserId, sSessId);
        
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String crtSessionId = getArgument(cmd, 1, true);
        String sPresType = getArgument(cmd, 2, true);
        String sUserId = getArgument(cmd, 3, true);
        String sSessId = getArgument(cmd, 4, true);
        return computeVos(sClientId, sPresType, sUserId, sSessId);
        
*****

***** PmEngine.java
      } else if (sCmdId.equalsIgnoreCase("getVosGraph")) {
        if (getArgumentCount(cmd) < 8) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
      } else if (sCmdId.equalsIgnoreCase("getVosGraph")) {
        if (getArgumentCount(cmd) < 9) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String crtSessionId = getArgument(cmd, 1, true);
        String sUserName = getArgument(cmd, 2, true);
        String sUserId = getArgument(cmd, 3, true);
        String sSessId = getArgument(cmd, 4, true);
        String sAnchorId = getArgument(cmd, 5, true);
        String sAnchorLabel = getArgument(cmd, 6, true);
        String sAnchorType = getArgument(cmd, 7, true);
        String sLevel = getArgument(cmd, 8, true);
        return getVosGraph(sClientId, sUserName, sUserId, sSessId, sAnchorId,
          sAnchorLabel, sAnchorType, sLevel);
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String crtSessionId = getArgument(cmd, 1, true);
        String sPresType = getArgument(cmd, 2, true);
        String sUserName = getArgument(cmd, 3, true);
        String sUserId = getArgument(cmd, 4, true);
        String sSessId = getArgument(cmd, 5, true);
        String sAnchorId = getArgument(cmd, 6, true);
        String sAnchorLabel = getArgument(cmd, 7, true);
        String sAnchorType = getArgument(cmd, 8, true);
        String sLevel = getArgument(cmd, 9, true);
        return getVosGraph(sClientId, sPresType, sUserName, sUserId, sSessId, sAnchorId,
          sAnchorLabel, sAnchorType, sLevel);
*****

***** PmEngine.java
        }
        String crtSessionId = getArgument(cmd, 1, true);
        String sSessId = getArgument(cmd, 2, true);
***** ..\OLDPMSERVER\PMENGINE.JAVA
        }
        String sCrtSessId = getArgument(cmd, 1, true);
        String sSessId = getArgument(cmd, 2, true);
*****

***** PmEngine.java
        String sObjId = getArgument(cmd, 3, true);
        return getPerms(sClientId, sSessId, sObjId);

***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sObjId = getArgument(cmd, 3, true);
        return getPerms(sCrtSessId, sSessId, sObjId);

*****

***** PmEngine.java
      } else if (sCmdId.equalsIgnoreCase("setHostAppPaths")) {
        if (getArgumentCount(cmd) < 4) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
      } else if (sCmdId.equalsIgnoreCase("setHostAppPaths")) {
        if (getArgumentCount(cmd) < 5) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sRtfedPath = getArgument(cmd, 4, true);
        return setHostAppPaths(sClientId, crtSessionId, sHost, sAtoolPath, sRtfedPath);
      
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sRtfedPath = getArgument(cmd, 4, true);
        String sWkfPath = getArgument(cmd, 5, true);
        return setHostAppPaths(sClientId, crtSessionId, sHost, sAtoolPath, sRtfedPath, sWkfPath);
      
*****

***** PmEngine.java
        String sDenyName = getArgument(cmd, 2, true);
        String sDenyClass = getArgument(cmd, 3, true);
        String sUserOrAttrName = getArgument(cmd, 4, true);
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sDenyName = getArgument(cmd, 2, true);
        String sDenyType = getArgument(cmd, 3, true);
        String sUserOrAttrName = getArgument(cmd, 4, true);
*****

***** PmEngine.java
        String sIsInters = getArgument(cmd, 9, true);
        return addDeny(sSessId, sDenyName, sDenyClass, sUserOrAttrName,
          sUserOrAttrId, sOp, sOattrName, sOattrId, sIsInters);
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sIsInters = getArgument(cmd, 9, true);
        return addDeny(sSessId, sDenyName, sDenyType, sUserOrAttrName,
          sUserOrAttrId, sOp, sOattrName, sOattrId, sIsInters);
*****

***** PmEngine.java

      } else if (sCmdId.equalsIgnoreCase("compileScript")) {
        if (getArgumentCount(cmd) < 1) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA

      } else if (sCmdId.equalsIgnoreCase("getEntityName")) {
        if (getArgumentCount(cmd) < 3) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        return compileScript(sClientId, sSessId, cmd);

      } else if (sCmdId.equalsIgnoreCase("deleteScriptsExcept")) {
        if (getArgumentCount(cmd) < 3) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        String sEntityId = getArgument(cmd, 2, true);
        String sEntityType = getArgument(cmd, 3, true);
        return getEntityName(sSessId, sEntityId, sEntityType);

      } else if (sCmdId.equalsIgnoreCase("getScripts")) {
        return getScripts();

      } else if (sCmdId.equalsIgnoreCase("enableScript")) {
        if (getArgumentCount(cmd) < 2) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        String sScriptName = getArgument(cmd, 2, true);
        String sScriptId = getArgument(cmd, 3, true);
        return deleteScriptsExcept(sSessId, sScriptName, sScriptId);

      } else if (sCmdId.equalsIgnoreCase("deleteScript")) {
        if (getArgumentCount(cmd) < 2) {
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        String sScriptId = getArgument(cmd, 2, true);
        return enableScript(sSessId, sScriptId);

      } else if (sCmdId.equalsIgnoreCase("getEnabledScript")) {
        return getEnabledScript();

      } else if (sCmdId.equalsIgnoreCase("compileScript")) {
        if (getArgumentCount(cmd) < 2) {
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        String sScriptId = getArgument(cmd, 2, true);
        return deleteScript(sSessId, sScriptId);

      } else if (sCmdId.equalsIgnoreCase("getAttrInfo")) {
        if (getArgumentCount(cmd) < 3) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        String sDeleteOthers = getArgument(cmd, 2, true);
        return compileScript(sSessId, sDeleteOthers, cmd);

      } else if (sCmdId.equalsIgnoreCase("compileScriptAndEnable")) {
        if (getArgumentCount(cmd) < 1) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        String sAttrId = getArgument(cmd, 2, true);
        String sAttrType = getArgument(cmd, 3, true);
        return getAttrInfo(sSessId, sAttrId, sAttrType);

      } else if (sCmdId.equalsIgnoreCase("addProp")) {
        if (getArgumentCount(cmd) < 4) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        return compileScriptAndEnable(sSessId, cmd);

      } else if (sCmdId.equalsIgnoreCase("compileScriptAndAddToEnabled")) {
        if (getArgumentCount(cmd) < 1) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        String sId = getArgument(cmd, 2, true);
        String sType = getArgument(cmd, 3, true);
        String sProp = getArgument(cmd, 4, true);
        return addProp(sSessId, sId, sType, sProp);

      } else if (sCmdId.equalsIgnoreCase("removeProp")) {
        if (getArgumentCount(cmd) < 4) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        return compileScriptAndAddToEnabled(sSessId, cmd);

      } else if (sCmdId.equalsIgnoreCase("addScript")) {
        if (getArgumentCount(cmd) < 3) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        String sId = getArgument(cmd, 2, true);
        String sType = getArgument(cmd, 3, true);
        String sProp = getArgument(cmd, 4, true);
        return removeProp(sSessId, sId, sType, sProp);

      } else if (sCmdId.equalsIgnoreCase("createObject")) {
        if (getArgumentCount(cmd) < 6) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        String sScriptId1 = getArgument(cmd, 2, true);
        String sScriptId2 = getArgument(cmd, 3, true);
        return addScript(sSessId, sScriptId1, sScriptId2);

      } else if (sCmdId.equalsIgnoreCase("addScriptToEnabled")) {
        if (getArgumentCount(cmd) < 2) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        String sObjName = getArgument(cmd, 2, true);
        String sObjClass = getArgument(cmd, 3, true);
        String sObjType = getArgument(cmd, 4, true);
        String sContainers = getArgument(cmd, 5, true);
        String sPerms = getArgument(cmd, 6, true);
        return createObject(sSessId, sObjName, sObjClass, sObjType, sContainers, sPerms);

      } else if (sCmdId.equalsIgnoreCase("getEventNames")) {
        if (getArgumentCount(cmd) < 1) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        String sScriptId = getArgument(cmd, 2, true);
        return addScriptToEnabled(sSessId, sScriptId);

      } else if (sCmdId.equalsIgnoreCase("deleteScriptsWithNameExcept")) {
        if (getArgumentCount(cmd) < 3) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        return getEventNames(sSessId);

      } else if (sCmdId.equalsIgnoreCase("addEventName")) {
        if (getArgumentCount(cmd) < 2) {
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        String sScriptName = getArgument(cmd, 2, true);
        String sScriptId = getArgument(cmd, 3, true);
        return deleteScriptsWithNameExcept(sSessId, sScriptName, sScriptId);

      } else if (sCmdId.equalsIgnoreCase("deleteScript")) {
        if (getArgumentCount(cmd) < 2) {
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        String sEventName = getArgument(cmd, 2, true);
        return addEventName(sSessId, sEventName);

      } else if (sCmdId.equalsIgnoreCase("deleteEventName")) {
        if (getArgumentCount(cmd) < 2) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        String sScriptId = getArgument(cmd, 2, true);
        return deleteScript(sSessId, sScriptId);

      } else if (sCmdId.equalsIgnoreCase("deleteScriptRule")) {
        if (getArgumentCount(cmd) < 3) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        String sEventName = getArgument(cmd, 2, true);
        return deleteEventName(sSessId, sEventName);

      } else if (sCmdId.equalsIgnoreCase("processEvent")) {
        if (getArgumentCount(cmd) < 5) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        String sScriptId = getArgument(cmd, 2, true);
        String sLabel = getArgument(cmd, 3, true);
        return deleteScriptRule(sScriptId, sLabel);

      } else if (sCmdId.equalsIgnoreCase("getAttrInfo")) {
        if (getArgumentCount(cmd) < 4) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        String sEventName = getArgument(cmd, 2, true);
        String sObjName = getArgument(cmd, 3, true);
        String sObjId = getArgument(cmd, 4, true);
        String sObjClass = getArgument(cmd, 5, true);
        String sObjType = getArgument(cmd, 6, true);
        String sCtx1 = getArgument(cmd, 7, true);
        String sCtx2 = getArgument(cmd, 8, true);
        return processEvent(sSessId, sEventName, sObjName, sObjId, sObjClass, 
          sObjType, sCtx1, sCtx2);

      } else if (sCmdId.equalsIgnoreCase("getAttrInfo")) {
        if (getArgumentCount(cmd) < 2) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        String sAttrId = getArgument(cmd, 2, true);
        String sAttrType = getArgument(cmd, 3, true);
        String sIsVos = getArgument(cmd, 4, true);
        return getAttrInfo(sSessId, sAttrId, sAttrType, sIsVos);

      } else if (sCmdId.equalsIgnoreCase("addProp")) {
        if (getArgumentCount(cmd) < 5) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        String sUserId = getArgument(cmd, 2, true);
        return getUserInfo(sSessId, sUserId);

      } else if (sCmdId.equalsIgnoreCase("getOpsetsBetween")) {
        if (getArgumentCount(cmd) < 4) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        String sId = getArgument(cmd, 2, true);
        String sType = getArgument(cmd, 3, true);
        String sIsVos = getArgument(cmd, 4, true);
        String sProp = getArgument(cmd, 5, true);
        return addProp(sSessId, sId, sType, sIsVos, sProp);

      } else if (sCmdId.equalsIgnoreCase("removeProp")) {
        if (getArgumentCount(cmd) < 5) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        String sUattrName = getArgument(cmd, 2, true);
        String sEntityName = getArgument(cmd, 3, true);
        String sEntityType = getArgument(cmd, 4, true);
        return getOpsetsBetween(sSessId, sUattrName, sEntityName, sEntityType);

      } else if (sCmdId.equalsIgnoreCase("getOpsetOattrs")) {
        if (getArgumentCount(cmd) < 2) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        String sId = getArgument(cmd, 2, true);
        String sType = getArgument(cmd, 3, true);
        String sIsVos = getArgument(cmd, 4, true);
        String sProp = getArgument(cmd, 5, true);
        return removeProp(sSessId, sId, sType, sIsVos, sProp);

      } else if (sCmdId.equalsIgnoreCase("createObject")) {
        if (getArgumentCount(cmd) < 6) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        String sOpsetName = getArgument(cmd, 2, true);
        return getOpsetOattrs(sSessId, sOpsetName);

      } else if (sCmdId.equalsIgnoreCase("buildClipboard")) {
        if (getArgumentCount(cmd) < 2) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        String sObjName = getArgument(cmd, 2, true);
        String sObjClass = getArgument(cmd, 3, true);
        String sObjType = getArgument(cmd, 4, true);
        String sContainers = getArgument(cmd, 5, true);
        String sPerms = getArgument(cmd, 6, true);
        return createObject(sSessId, sObjName, sObjClass, sObjType, sContainers, sPerms);

      } else if (sCmdId.equalsIgnoreCase("getEventNames")) {
        if (getArgumentCount(cmd) < 1) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        String sOattrName = getArgument(cmd, 2, true);
        return buildClipboard(sSessId, sOattrName);

      } else if (sCmdId.equalsIgnoreCase("isolateOattr")) {
        if (getArgumentCount(cmd) < 3) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        return getEventNames(sSessId);

      } else if (sCmdId.equalsIgnoreCase("addEventName")) {
        if (getArgumentCount(cmd) < 2) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        String sAttrName = getArgument(cmd, 2, true);
        String sAttrType = getArgument(cmd, 3, true);
        return isolateOattr(sAttrName, sAttrType);

      } else if (sCmdId.equalsIgnoreCase("setPerms")) {
        if (getArgumentCount(cmd) < 3) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        String sEventName = getArgument(cmd, 2, true);
        return addEventName(sSessId, sEventName);

      } else if (sCmdId.equalsIgnoreCase("deleteEventName")) {
        if (getArgumentCount(cmd) < 2) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        String sUattrName = getArgument(cmd, 2, true);
        String sOpset = getArgument(cmd, 3, true);
        String sSuggOattr = getArgument(cmd, 4, true);
        String sSuggBase = getArgument(cmd, 5, true);
        String sSuggBaseType = getArgument(cmd, 6, true);
        String sPerms = getArgument(cmd, 7, true);
        String sEntName = getArgument(cmd, 8, true);
        String sEntType = getArgument(cmd, 9, true);
        String sInclAscs = getArgument(cmd, 10, true);
        return setPerms(sSessId, sUattrName, sOpset, sSuggOattr, sSuggBase, 
          sSuggBaseType, sPerms, sEntName, sEntType, sInclAscs);

      } else if (sCmdId.equalsIgnoreCase("testGUWC")) {
        // TestGetUsersWithCapability
        if (getArgumentCount(cmd) < 4) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        String sEventName = getArgument(cmd, 2, true);
        return deleteEventName(sSessId, sEventName);

      } else if (sCmdId.equalsIgnoreCase("processEvent")) {
        if (getArgumentCount(cmd) < 5) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        String sOp = getArgument(cmd, 2, true);
        String sContainerName = getArgument(cmd, 3, true);
        String sPcName = getArgument(cmd, 4, true);
        return testGUWC(sSessId, sOp, sContainerName, sPcName);

      } else if (sCmdId.equalsIgnoreCase("addTask")) {
        if (getArgumentCount(cmd) < 2) {
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        String sEventName = getArgument(cmd, 2, true);
        String sObjName = getArgument(cmd, 3, true);
        String sObjId = getArgument(cmd, 4, true);
        String sObjClass = getArgument(cmd, 5, true);
        String sObjType = getArgument(cmd, 6, true);
        String sCtx1 = getArgument(cmd, 7, true);
        String sCtx2 = getArgument(cmd, 8, true);
        return processEvent(sSessId, sEventName, sObjName, sObjId, sObjClass, 
          sObjType, sCtx1, sCtx2);

      } else if (sCmdId.equalsIgnoreCase("getAttrInfo")) {
        if (getArgumentCount(cmd) < 2) {
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        String sTask = getArgument(cmd, 2, true);
        String sOp = getArgument(cmd, 3, true);
        String sOcont = getArgument(cmd, 4, true);
        String sPc = getArgument(cmd, 5, true);
        return addTask(sSessId, sTask, sOp, sOcont, sPc);

      } else if (sCmdId.equalsIgnoreCase("getTasks")) {
        if (getArgumentCount(cmd) < 1) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        String sUserId = getArgument(cmd, 2, true);
        return getUserInfo(sSessId, sUserId);

      } else if (sCmdId.equalsIgnoreCase("getOpsetsBetween")) {
        if (getArgumentCount(cmd) < 4) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        return getTasks(sSessId);

      } else if (sCmdId.equalsIgnoreCase("getTaskInfo")) {
        if (getArgumentCount(cmd) < 2) {
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        String sUattrName = getArgument(cmd, 2, true);
        String sEntityName = getArgument(cmd, 3, true);
        String sEntityType = getArgument(cmd, 4, true);
        return getOpsetsBetween(sSessId, sUattrName, sEntityName, sEntityType);

      } else if (sCmdId.equalsIgnoreCase("getOpsetOattrs")) {
        if (getArgumentCount(cmd) < 2) {
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        String sTaskId = getArgument(cmd, 2, true);
        return getTaskInfo(sSessId, sTaskId);

      } else if (sCmdId.equalsIgnoreCase("deleteTask")) {
        if (getArgumentCount(cmd) < 2) {
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        String sOpsetName = getArgument(cmd, 2, true);
        return getOpsetOattrs(sSessId, sOpsetName);

      } else if (sCmdId.equalsIgnoreCase("buildClipboard")) {
        if (getArgumentCount(cmd) < 2) {
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        String sTaskId = getArgument(cmd, 2, true);
        String sCap = getArgument(cmd, 3, true);
        return deleteTask(sSessId, sTaskId, sCap);

      } else if (sCmdId.equalsIgnoreCase("addScon")) {
        if (getArgumentCount(cmd) < 3) {
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        String sOattrName = getArgument(cmd, 2, true);
        return buildClipboard(sSessId, sOattrName);

      } else if (sCmdId.equalsIgnoreCase("isolateOattr")) {
        if (getArgumentCount(cmd) < 3) {
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        String sScon = getArgument(cmd, 2, true);
        String sK = getArgument(cmd, 3, true);
        String sTask = getArgument(cmd, 4, true);
        return addScon(sSessId, sScon, sK, sTask);

      } else if (sCmdId.equalsIgnoreCase("getScons")) {
        if (getArgumentCount(cmd) < 1) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        String sAttrName = getArgument(cmd, 2, true);
        String sAttrType = getArgument(cmd, 3, true);
        return isolateOattr(sAttrName, sAttrType);

      } else if (sCmdId.equalsIgnoreCase("setPerms")) {
        if (getArgumentCount(cmd) < 3) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        return getScons(sSessId);

      } else if (sCmdId.equalsIgnoreCase("getSconInfo")) {
        if (getArgumentCount(cmd) < 2) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        String sUattrName = getArgument(cmd, 2, true);
        String sOpset = getArgument(cmd, 3, true);
        String sSuggOattr = getArgument(cmd, 4, true);
        String sSuggBase = getArgument(cmd, 5, true);
        String sSuggBaseType = getArgument(cmd, 6, true);
        String sPerms = getArgument(cmd, 7, true);
        String sEntName = getArgument(cmd, 8, true);
        String sEntType = getArgument(cmd, 9, true);
        String sInclAscs = getArgument(cmd, 10, true);
        return setPerms(sSessId, sUattrName, sOpset, sSuggOattr, sSuggBase, 
          sSuggBaseType, sPerms, sEntName, sEntType, sInclAscs);

      } else if (sCmdId.equalsIgnoreCase("testGUWC")) {
        // TestGetUsersWithCapability
        if (getArgumentCount(cmd) < 4) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        String sSconId = getArgument(cmd, 2, true);
        return getSconInfo(sSessId, sSconId);

      } else if (sCmdId.equalsIgnoreCase("deleteScon")) {
        if (getArgumentCount(cmd) < 2) {
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        String sOp = getArgument(cmd, 2, true);
        String sContainerName = getArgument(cmd, 3, true);
        String sPcName = getArgument(cmd, 4, true);
        return testGUWC(sSessId, sOp, sContainerName, sPcName);

      } else if (sCmdId.equalsIgnoreCase("addTask")) {
        if (getArgumentCount(cmd) < 2) {
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        String sSconId = getArgument(cmd, 2, true);
        String sTask = getArgument(cmd, 3, true);
        return deleteScon(sSessId, sSconId, sTask);

      } else if (sCmdId.equalsIgnoreCase("checkScon")) {
        if (getArgumentCount(cmd) < 2) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        String sTask = getArgument(cmd, 2, true);
        String sOp = getArgument(cmd, 3, true);
        String sOcont = getArgument(cmd, 4, true);
        String sPc = getArgument(cmd, 5, true);
        return addTask(sSessId, sTask, sOp, sOcont, sPc);

      } else if (sCmdId.equalsIgnoreCase("getTasks")) {
        if (getArgumentCount(cmd) < 1) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        String sSconId = getArgument(cmd, 2, true);
        return checkScon(sSconId);

      } else if (sCmdId.equalsIgnoreCase("addScona")) {
        if (getArgumentCount(cmd) < 3) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        return getTasks(sSessId);

      } else if (sCmdId.equalsIgnoreCase("getTaskInfo")) {
        if (getArgumentCount(cmd) < 2) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        String sScona = getArgument(cmd, 2, true);
        String sPc = getArgument(cmd, 3, true);
        String sUattr = getArgument(cmd, 4, true);
        String sOp = getArgument(cmd, 5, true);
        String sOattr = getArgument(cmd, 6, true);
        return addScona(sSessId, sScona, sPc, sUattr, sOp, sOattr);

      } else if (sCmdId.equalsIgnoreCase("getSconas")) {
        if (getArgumentCount(cmd) < 1) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        String sTaskId = getArgument(cmd, 2, true);
        return getTaskInfo(sSessId, sTaskId);

      } else if (sCmdId.equalsIgnoreCase("deleteTask")) {
        if (getArgumentCount(cmd) < 2) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        return getSconas(sSessId);

      } else if (sCmdId.equalsIgnoreCase("getSconaInfo")) {
        if (getArgumentCount(cmd) < 2) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        String sTaskId = getArgument(cmd, 2, true);
        String sCap = getArgument(cmd, 3, true);
        return deleteTask(sSessId, sTaskId, sCap);

      } else if (sCmdId.equalsIgnoreCase("addScon")) {
        if (getArgumentCount(cmd) < 3) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        String sSconaId = getArgument(cmd, 2, true);
        return getSconaInfo(sSessId, sSconaId);

      } else if (sCmdId.equalsIgnoreCase("deleteScona")) {
        if (getArgumentCount(cmd) < 2) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        String sScon = getArgument(cmd, 2, true);
        String sK = getArgument(cmd, 3, true);
        String sTask = getArgument(cmd, 4, true);
        return addScon(sSessId, sScon, sK, sTask);

      } else if (sCmdId.equalsIgnoreCase("getScons")) {
        if (getArgumentCount(cmd) < 1) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        String sSconaId = getArgument(cmd, 2, true);
        String sOp = getArgument(cmd, 3, true);
        return deleteScona(sSessId, sSconaId, sOp);

      } else if (sCmdId.equalsIgnoreCase("checkScona")) {
        if (getArgumentCount(cmd) < 2) {
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        return getScons(sSessId);

      } else if (sCmdId.equalsIgnoreCase("getSconInfo")) {
        if (getArgumentCount(cmd) < 2) {
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        String sSconaId = getArgument(cmd, 2, true);
        return checkScona(sSconaId);

      } else if (sCmdId.equalsIgnoreCase("getEntityWithProp")) {
        if (getArgumentCount(cmd) < 3) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        String sSconId = getArgument(cmd, 2, true);
        return getSconInfo(sSessId, sSconId);

      } else if (sCmdId.equalsIgnoreCase("deleteScon")) {
        if (getArgumentCount(cmd) < 2) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        String sEntType = getArgument(cmd, 2, true);
        String sProp = getArgument(cmd, 3, true);
        return getEntityWithProp(sSessId, sEntType, sProp);

      } else if (sCmdId.equalsIgnoreCase("doDacConfinement")) {
        if (getArgumentCount(cmd) < 5) {
          return failure("Too few arguments");
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        String sSconId = getArgument(cmd, 2, true);
        String sTask = getArgument(cmd, 3, true);
        return deleteScon(sSessId, sSconId, sTask);

      } else if (sCmdId.equalsIgnoreCase("checkScon")) {
        if (getArgumentCount(cmd) < 2) {
          return failure("Too few arguments");
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        String sUser = getArgument(cmd, 2, true);
        String sPc = getArgument(cmd, 3, true);
        String sAttr = getArgument(cmd, 4, true);
        String sCont = getArgument(cmd, 5, true);
        return doDacConfinement(sSessId, sUser, sPc, sAttr, sCont);
      
      } else if (sCmdId.equalsIgnoreCase("testGetMemberObjects")) {
        if (getArgumentCount(cmd) < 3) {
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        String sSconId = getArgument(cmd, 2, true);
        return checkScon(sSconId);

      } else if (sCmdId.equalsIgnoreCase("addScona")) {
        if (getArgumentCount(cmd) < 3) {
*****

***** PmEngine.java
        String sSessId = getArgument(cmd, 1, true);
        String sContId = getArgument(cmd, 2, true);
***** ..\OLDPMSERVER\PMENGINE.JAVA
        String sSessId = getArgument(cmd, 1, true);
        String sScona = getArgument(cmd, 2, true);
        String sPc = getArgument(cmd, 3, true);
        String sUattr = getArgument(cmd, 4, true);
        String sOp = getArgument(cmd, 5, true);
        String sOattr = getArgument(cmd, 6, true);
        return addScona(sSessId, sScona, sPc, sUattr, sOp, sOattr);

      } else if (sCmdId.equalsIgnoreCase("getSconas")) {
        if (getArgumentCount(cmd) < 1) {
          return failure("Too few arguments");
        }
        String sSessId = getArgument(cmd, 1, true);
        return getSconas(sSessId);

      } else if (sCmdId.equalsIgnoreCase("getSconaInfo")) {
        if (getArgumentCount(cmd) < 2) {
          return failure("Too few arguments");
        }
        String sSessId = getArgument(cmd, 1, true);
        String sSconaId = getArgument(cmd, 2, true);
        return getSconaInfo(sSessId, sSconaId);

      } else if (sCmdId.equalsIgnoreCase("deleteScona")) {
        if (getArgumentCount(cmd) < 2) {
          return failure("Too few arguments");
        }
        String sSessId = getArgument(cmd, 1, true);
        String sSconaId = getArgument(cmd, 2, true);
        String sOp = getArgument(cmd, 3, true);
        return deleteScona(sSessId, sSconaId, sOp);

      } else if (sCmdId.equalsIgnoreCase("checkScona")) {
        if (getArgumentCount(cmd) < 2) {
          return failure("Too few arguments");
        }
        String sSessId = getArgument(cmd, 1, true);
        String sSconaId = getArgument(cmd, 2, true);
        return checkScona(sSconaId);

      } else if (sCmdId.equalsIgnoreCase("getEntityWithProp")) {
        if (getArgumentCount(cmd) < 3) {
          return failure("Too few arguments");
        }
        String sSessId = getArgument(cmd, 1, true);
        String sEntType = getArgument(cmd, 2, true);
        String sProp = getArgument(cmd, 3, true);
        return getEntityWithProp(sSessId, sEntType, sProp);

      } else if (sCmdId.equalsIgnoreCase("doDacConfinement")) {
        if (getArgumentCount(cmd) < 5) {
          return failure("Too few arguments");
        }
        String sSessId = getArgument(cmd, 1, true);
        String sUser = getArgument(cmd, 2, true);
        String sPc = getArgument(cmd, 3, true);
        String sAttr = getArgument(cmd, 4, true);
        String sCont = getArgument(cmd, 5, true);
        return doDacConfinement(sSessId, sUser, sPc, sAttr, sCont);
      
      } else if (sCmdId.equalsIgnoreCase("testGetMemberObjects")) {
        if (getArgumentCount(cmd) < 3) {
          return failure("Too few arguments");
        }
        String sSessId = getArgument(cmd, 1, true);
        String sContId = getArgument(cmd, 2, true);
*****

***** PmEngine.java
      
      } else {
***** ..\OLDPMSERVER\PMENGINE.JAVA
      
      } else if (sCmdId.equalsIgnoreCase("testGetPmViews")) {
        if (getArgumentCount(cmd) < 3) {
          return failure("Too few arguments");
        }
        String sSessId = getArgument(cmd, 1, true);
        String sUserId = getArgument(cmd, 2, true);
        String sType = getArgument(cmd, 3, true);
        return testGetPmViews(sSessId, sUserId, sType);
      
      } else if (sCmdId.equalsIgnoreCase("isAssigned")) {
        if (getArgumentCount(cmd) < 5) {
          return failure("Too few arguments");
        }
        String sSessId = getArgument(cmd, 1, true);
        String sId1 = getArgument(cmd, 2, true);
        String sType1 = getArgument(cmd, 3, true);
        String sId2 = getArgument(cmd, 4, true);
        String sType2 = getArgument(cmd, 5, true);
        return isAssigned(sId1, sType1, sId2, sType2);
      
      } else if (sCmdId.equalsIgnoreCase("getEntityId")) {
        if (getArgumentCount(cmd) < 3) {
          return failure("Too few arguments");
        }
        String sSessId = getArgument(cmd, 1, true);
        String sName = getArgument(cmd, 2, true);
        String sType = getArgument(cmd, 3, true);
        return getEntityId(sSessId, sName, sType);
      
      } else if (sCmdId.equalsIgnoreCase("getEntityName")) {
        if (getArgumentCount(cmd) < 3) {
          return failure("Too few arguments");
        }
        String sSessId = getArgument(cmd, 1, true);
        String sId = getArgument(cmd, 2, true);
        String sType = getArgument(cmd, 3, true);
        return getEntityName(sSessId, sId, sType);

      } else if (sCmdId.equalsIgnoreCase("testGetDeniedPerms")) {
        if (getArgumentCount(cmd) < 3) {
          return failure("Too few arguments");
        }
        String sCrtSessId = getArgument(cmd, 1, true);
        String sSessId = getArgument(cmd, 2, true);
        String sObjName = getArgument(cmd, 3, true);
        return testGetDeniedPerms(sSessId, sObjName);

      } else {
*****

***** PmEngine.java
        if (adminOpers.isEmpty()) return success();
        res = (ArrayList)createOpsetBetween(adminOpers, sUattrId, sEntId);
        if (isFailure(res)) return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
        if (adminOpers.isEmpty()) return success();
        res = (ArrayList)createOpsetBetween(sSessId, adminOpers, sUattrId, sEntId);
        if (isFailure(res)) return res;
*****

***** PmEngine.java
      if (!ioOpers.isEmpty()) {
        res = (ArrayList)createOpsetBetween(ioOpers, sUattrId, sEntId);
        if (isFailure(res)) return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
      if (!ioOpers.isEmpty()) {
        res = (ArrayList)createOpsetBetween(sSessId, ioOpers, sUattrId, sEntId);
        if (isFailure(res)) return res;
*****

***** PmEngine.java
    
    res = (ArrayList)createOpsetBetween(adminOpers, sUattrId, sRepOaId);
    if (isFailure(res)) return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    
    res = (ArrayList)createOpsetBetween(sSessId, adminOpers, sUattrId, sRepOaId);
    if (isFailure(res)) return res;
*****

***** PmEngine.java

  // Returns true iff the oattr is associated to an object that represents
  // a PM entity.
  private boolean oattrRepresentsAnEntity(String sOattrId) {
    // Get the assoc object, if any.
    String sObjId = getAssocObj(sOattrId);
    if (sObjId == null) {
      return false;
    }
    try {
***** ..\OLDPMSERVER\PMENGINE.JAVA

  // Returns true if the argument is an object that represents a PM entity
  // as needed by AdminVos (i.e., one in {pm} U PC U UA U U U OA).
  private boolean objRepresentsAGraphEntity(String sObjId) {
    try {
*****

***** PmEngine.java
      Attributes attrs = ctx.getAttributes("CN=" + sObjId + "," + sVirtualObjContainerDN);
      // pmOriginalName must be set for representative objects.
      Attribute attr = attrs.get("pmOriginalName");
      return (attr != null);
    } catch (Exception e) {
***** ..\OLDPMSERVER\PMENGINE.JAVA
      Attributes attrs = ctx.getAttributes("CN=" + sObjId + "," + sVirtualObjContainerDN);
      Attribute attr = attrs.get("pmObjClass");
      if (attr == null || attr.size() <= 0) {
        System.out.println("objReprAnEntity: pmObjClass is null or empty");
        return false;
      }
      String sClass = (String)attr.get();
      System.out.println("objReprAnEntity: sClass is " + sClass);
      if (sClass.equalsIgnoreCase(PM_CLASS_USER_NAME)) return true;
      if (sClass.equalsIgnoreCase(PM_CLASS_UATTR_NAME)) return true;
      if (sClass.equalsIgnoreCase(PM_CLASS_OATTR_NAME)) return true;
      if (sClass.equalsIgnoreCase(PM_CLASS_CONN_NAME)) return true;
      if (sClass.equalsIgnoreCase(PM_CLASS_POL_NAME)) return true;
      return false;
    } catch (Exception e) {
*****

***** PmEngine.java
      return false;
    }
  }
***** ..\OLDPMSERVER\PMENGINE.JAVA
      return false;
    }    
  }
*****

***** PmEngine.java

  // Create an opset with the operations specified in opSet and insert it between
***** ..\OLDPMSERVER\PMENGINE.JAVA

  // Returns true iff the oattr is associated to an object that represents
  // a PM entity.
  private boolean oattrRepresentsAnEntity(String sOattrId) {
    // Get the assoc object, if any.
    String sObjId = getAssocObj(sOattrId);
    if (sObjId == null) {
      return false;
    }
    try {
      Attributes attrs = ctx.getAttributes("CN=" + sObjId + "," + sVirtualObjContainerDN);
      // pmOriginalName must be set for representative objects.
      Attribute attr = attrs.get("pmOriginalName");
      return (attr != null);
    } catch (Exception e) {
      if (debugFlag) e.printStackTrace();
      return false;
    }
  }

  // Create an opset with the operations specified in opSet and insert it between
*****

***** PmEngine.java
  // or null in case of error.
  private Object createOpsetBetween(HashSet opSet, String sUattrId, String sOattrId) {
    ArrayList res = null;
***** ..\OLDPMSERVER\PMENGINE.JAVA
  // or null in case of error.
  private Object createOpsetBetween(String sSessId, HashSet opSet, String sUattrId, String sOattrId) {
    ArrayList res = null;
*****

***** PmEngine.java

    // Generate a name for the operation set.
***** ..\OLDPMSERVER\PMENGINE.JAVA

    // Check some permissions.
    if (!requestAddOpsetPerms(sSessId, sOattrId, PM_NODE_OATTR))
      return failure(reqPermsMsg);

    
    // Generate a name for the operation set.
*****

***** PmEngine.java
    }
    res = (ArrayList)addDoubleLink(sUattrId, PM_NODE_UATTR, sOpsetId, PM_NODE_OPSET);
    if (isFailure(res)) return res;
    res = (ArrayList)addDoubleLink(sOpsetId, PM_NODE_OPSET, sOattrId, PM_NODE_OATTR);
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    res = (ArrayList)addDoubleLink(sOpsetId, PM_NODE_OPSET, sOattrId, PM_NODE_OATTR);
*****

***** PmEngine.java

    // Add the operations.
***** ..\OLDPMSERVER\PMENGINE.JAVA

    // Insert here the permission check.
    if (!requestAssignPerms(sSessId, sUattrId, PM_NODE_UATTR, sOpsetId, PM_NODE_OPSET))
      return failure(reqPermsMsg);
    
    res = (ArrayList)addDoubleLink(sUattrId, PM_NODE_UATTR, sOpsetId, PM_NODE_OPSET);
    if (isFailure(res)) return res;

    
    // Add the operations.
*****

***** PmEngine.java
  // Object read      ?                        File          -            -
  // Object write     null                     File          -            -
  // Object delete    obj id                   -             Containers   assoc id
***** ..\OLDPMSERVER\PMENGINE.JAVA
  // Object read      ?                        File          -            -
  // Object write     -                        File          Containers   -
  // Object delete    obj id                   -             Containers   assoc id
*****

***** PmEngine.java
  // directly assigned to. Ctx2 contains the id of the associated object attribute.
  private Object processEvent(String sSessId, String sEventName, String sObjName,
***** ..\OLDPMSERVER\PMENGINE.JAVA
  // directly assigned to. Ctx2 contains the id of the associated object attribute.
  // For Object write/read, first get the obj id, Ctx1 and Ctx2.
  private Object processEvent(String sSessId, String sEventName, String sObjName,
*****

***** PmEngine.java
    }
    
    // Get the enabled script.
    String sScriptId = getEntityId("demo", PM_SCRIPT);
    System.out.println("processEvent found script " + sScriptId);
    if (sScriptId == null) return success();

    ArrayList result = null;
    try {
      Attributes scriptAttrs = ctx.getAttributes("CN=" + sScriptId + "," + sRuleContainerDN);
      Attribute attr = scriptAttrs.get("pmFirst");
      
      EventContext eventCtx = new EventContext(sSessId, sEventName, sObjName,
        sObjClass, sObjType, sObjId, sCtx1, sCtx2);
      while (attr != null) {
        String sRuleId = (String)attr.get();
        result = (ArrayList)matchEvent(eventCtx, sRuleId);
        if (isFailure(result)) {
          System.out.println(((String)result.get(0)).substring(4));
        } else {
          System.out.println("...Applying rule " + sRuleId + "!");
          result = (ArrayList)applyRule(eventCtx, sRuleId);
          if (isFailure(result))
            System.out.println("Error in rule " + sRuleId + ": " + ((String)result.get(0)).substring(4));
        }
        Attributes ruleAttrs = ctx.getAttributes("CN=" + sRuleId + "," + sRuleContainerDN);
        attr = ruleAttrs.get("pmNext");
      }
      
    } catch (Exception e) {
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }

    try {
      if (sEventName.equalsIgnoreCase("Object write") ||
          sEventName.equalsIgnoreCase("Object read")) {
        String sAssocId = getAssocOattr(sObjId);
        // Get the first level containers where this object is in this moment.
        Attribute attr = getToAttrs(sAssocId, PM_NODE_OATTR);
        StringBuffer sb = new StringBuffer();
        boolean firstTime = true;
        if (attr != null) for (NamingEnumeration enum = attr.getAll(); enum.hasMore(); ) {
          String sId = (String)enum.next();
          if (firstTime) {
            firstTime = false;
          } else {
            sb.append(PM_LIST_MEMBER_SEP);
          }
          sb.append(PM_NODE_OATTR + PM_ALT_FIELD_DELIM + getEntityName(sId, PM_NODE_OATTR));
        }
        if (sb.length() > 0) sCtx1 = sb.toString();
        sCtx2 = sAssocId;
      }
    } catch (Exception e) {
*****

***** PmEngine.java
      if (debugFlag) e.printStackTrace();
      return failure("Exception looping through rules during event match: " + e.getMessage());
***** ..\OLDPMSERVER\PMENGINE.JAVA
      if (debugFlag) e.printStackTrace();
      return failure("Exception processing event arguments");
    }
    
    System.out.println("processEvent with processed arguments");
    System.out.println("    sessId          = " + sSessId);
    System.out.println("    eventName       = " + sEventName);
    System.out.println("    objName         = " + sObjName);
    System.out.println("    objId           = " + sObjId);
    System.out.println("    objClass        = " + sObjClass);
    System.out.println("    objType         = " + sObjType);
    System.out.println("    ctx1            = " + sCtx1);
    System.out.println("    ctx2            = " + sCtx2);

    
    // Get the enabled script.
    String sScriptId = sEnabledScriptId;
    if (sScriptId == null) return success();

    ArrayList result = null;
    try {
      Attributes scriptAttrs = ctx.getAttributes("CN=" + sScriptId + "," + sRuleContainerDN);
      Attribute attr = scriptAttrs.get("pmFirst");
      
      EventContext eventCtx = new EventContext(sSessId, sEventName, sObjName,
        sObjClass, sObjType, sObjId, sCtx1, sCtx2);
      while (attr != null) {
        String sRuleId = (String)attr.get();
        result = (ArrayList)matchEvent(eventCtx, sRuleId);
        if (isFailure(result)) {
          System.out.println(((String)result.get(0)).substring(4));
        } else {
          System.out.println("...Applying rule " + sRuleId + "!");
          result = (ArrayList)applyRule(eventCtx, sRuleId);
          if (isFailure(result))
            System.out.println("Error in rule " + sRuleId + ": " + ((String)result.get(0)).substring(4));
        }
        Attributes ruleAttrs = ctx.getAttributes("CN=" + sRuleId + "," + sRuleContainerDN);
        attr = ruleAttrs.get("pmNext");
      }
    } catch (NameNotFoundException e) {
      // If the rule was deleted by an action???
      if (debugFlag) e.printStackTrace();
    } catch (Exception e) {
      if (debugFlag) e.printStackTrace();
      return failure("Exception looping through rules during event match: " + e.getMessage());
*****

***** PmEngine.java
        ArrayList result = (ArrayList)applyAction(eventCtx, sActionId);
        if (isFailure(result)) System.out.println("ERROR: " + ((String)result.get(0)).substring(4));
***** ..\OLDPMSERVER\PMENGINE.JAVA
        ArrayList result = (ArrayList)applyAction(eventCtx, sActionId);
        
        // Even when applying the action results in a failure, we may want
        // to continue.
        if (isFailure(result)) System.out.println("ERROR: " + ((String)result.get(0)).substring(4));
*****

***** PmEngine.java
        //if (isFailure(result)) return result;
        Attributes actAttrs = ctx.getAttributes("CN=" + sActionId + "," + sRuleContainerDN);
***** ..\OLDPMSERVER\PMENGINE.JAVA
        //if (isFailure(result)) return result;
        
        // If this action deleted the rule, extracting the action attributes
        // will result in an exception we can ignore.
        Attributes actAttrs = ctx.getAttributes("CN=" + sActionId + "," + sRuleContainerDN);
*****

***** PmEngine.java
      }
    } catch (Exception e) {
***** ..\OLDPMSERVER\PMENGINE.JAVA
      }
    } catch (NameNotFoundException e) {
      e.printStackTrace();
      //return failure("Exception while getting rule actions: " + e.getMessage());
    } catch (Exception e) {
*****

***** PmEngine.java
      e.printStackTrace();
      return failure("Exception getting rule actions: " + e.getMessage());
    }
***** ..\OLDPMSERVER\PMENGINE.JAVA
      e.printStackTrace();
      return failure("Exception while getting rule actions: " + e.getMessage());
    }
*****

***** PmEngine.java
      else if (sAct.equals("delete deny")) return applyActionDeleteDeny(eventCtx, sActionId);
      else return failure("Unknown action type " + sAct);
***** ..\OLDPMSERVER\PMENGINE.JAVA
      else if (sAct.equals("delete deny")) return applyActionDeleteDeny(eventCtx, sActionId);
      else if (sAct.equals("delete rule")) return applyActionDeleteRule(eventCtx, sActionId);
      else return failure("Unknown action type " + sAct);
*****

***** PmEngine.java
  
  private Object applyActionDeassign(EventContext eventCtx, String sActionId) {
    try {
***** ..\OLDPMSERVER\PMENGINE.JAVA
  
  private Object applyActionDeleteRule(EventContext eventCtx, String sActionId) {
    try {
*****

***** PmEngine.java
      Attribute attr = actAttrs.get("pmOpnd1");
      if (attr == null) return failure("No operand 1 in \"Delete assignment\" action");
      HashSet hsOpnd1 = new HashSet();
      String sLastError = null;
      for (NamingEnumeration enum = attr.getAll(); enum.hasMore(); ) {
        String sOpndId = (String)enum.next();
        // Get the runtime action operand and insert it into the HashSet of
        // first operands. Most often, the run-time operand is the same as the
        // compile-time operand. A function operand at run-time is different.
        ActOpnd[] actOpnds = evalOpnd(eventCtx, sOpndId);
        sLastError = actOpnds[0].getError();
***** ..\OLDPMSERVER\PMENGINE.JAVA
      Attribute attr = actAttrs.get("pmOpnd1");
      
      String sLastError = null;
      ActOpnd actOpnd1 = null;
      ActOpnd[] actOpnds = null;
      String sOpndId = null;
      
      attr = actAttrs.get("pmOpnd1");
      if (attr == null)
        return failure("No labels in \"Delete rule(s)\" action " + sActionId);
      HashSet hsOpnd1 = new HashSet();
      for (NamingEnumeration enum = attr.getAll(); enum.hasMore(); ) {
        sOpndId = (String)enum.next();
        actOpnds = evalOpnd(eventCtx, sOpndId);
        sLastError = actOpnds[0].getError();
*****

***** PmEngine.java
        if (sLastError != null) {
          System.out.println("Last error in evalOpnd was: " + sLastError);
          continue;
***** ..\OLDPMSERVER\PMENGINE.JAVA
        if (sLastError != null) {
          System.out.println("Last error when evaluating operand 1: " + sLastError);
          continue;
*****

***** PmEngine.java
      }
      printOpndSet(hsOpnd1, "Set of first operands in \"Delete assignment\"");
      if (hsOpnd1.isEmpty()) {
        System.out.println("No first operands in deassign. Last error was: " + sLastError);
        return failure("No first operands in deassign. Last error was: " + sLastError);
      }
      
      attr = actAttrs.get("pmOpnd2");
      if (attr == null) return failure("No operand 2 in \"Delete assignment\" action");
      HashSet hsOpnd2 = new HashSet();
      for (NamingEnumeration enum = attr.getAll(); enum.hasMore(); ) {
        String sOpndId = (String)enum.next();
        ActOpnd[] actOpnds = evalOpnd(eventCtx, sOpndId);
        sLastError = actOpnds[0].getError();
        if (sLastError != null) {
          System.out.println("Last error in evalOpnd was: " + sLastError);
          continue;
        }
        for (int i = 0; i < actOpnds.length; i++) hsOpnd2.add(actOpnds[i]);
      }
      printOpndSet(hsOpnd2, "Set of second operands in \"Delete assignment\"");
      if (hsOpnd2.isEmpty()) {
        System.out.println("No second operands in \"Delete assignment\". Last error was: " + sLastError);
        return failure("No second operands in \"Delete assignment\". Last error was: " + sLastError);
      }
      
      // Deassign each operand1 to each operand2. Even if there is an error,
      // try to perform as much as possible and then report.
      Iterator iter1 = hsOpnd1.iterator();
      Iterator iter2 = hsOpnd2.iterator();
     
***** ..\OLDPMSERVER\PMENGINE.JAVA
      }
      printOpndSet(hsOpnd1, "Set of first operands in \"Delete rule(s)\"");
      if (hsOpnd1.isEmpty())
        return failure("No first operands in \"Delete rule(s)\". Last error was: " + sLastError);

      // Delete the rules with the labels specified in hsOpnd1.
      Iterator iter1 = hsOpnd1.iterator();
     
*****

***** PmEngine.java
        ActOpnd opnd1 = (ActOpnd)iter1.next();
        while (iter2.hasNext()) {
          ActOpnd opnd2 = (ActOpnd)iter2.next();
          ArrayList result = (ArrayList)deleteAssignmentInternal(opnd1.getId(), opnd1.getType(),
            opnd2.getId(), opnd2.getType());
          if (isFailure(result)) {
            sLastError = ((String)result.get(0)).substring(4);
          }
        }
***** ..\OLDPMSERVER\PMENGINE.JAVA
        ActOpnd opnd1 = (ActOpnd)iter1.next();
        ArrayList result = (ArrayList)deleteScriptRule(sEnabledScriptId, opnd1.getName());
        if (isFailure(result)) {
          sLastError = ((String)result.get(0)).substring(4);
        }
*****

***** PmEngine.java
      if (sLastError != null) return failure(sLastError);
    } catch (Exception e) {
***** ..\OLDPMSERVER\PMENGINE.JAVA
      if (sLastError != null) return failure(sLastError);
      
      return success();
    } catch (Exception e) {
*****

***** PmEngine.java
    }
    return success();
  }
  
  private Object applyActionDeleteDeny(EventContext eventCtx, String sActionId) {
    try {
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
  }

  private Object applyActionDeassign(EventContext eventCtx, String sActionId) {
    try {
*****

***** PmEngine.java
      Attributes actAttrs = ctx.getAttributes("CN=" + sActionId + "," + sRuleContainerDN);
      Attribute attr = actAttrs.get("pmIsIntrasession");
      if (attr == null) return failure("No intrasession attribute in \"Delete deny\" action " + sActionId);
      boolean bIntrasession = ((String)attr.get()).equals("TRUE");
      attr = actAttrs.get("pmIsIntersection");
      if (attr == null) return failure("No intersection attribute in \"Delete deny\" action " + sActionId);
      boolean bIntersection = ((String)attr.get()).equals("TRUE");

      attr = actAttrs.get("pmOpnd1");
      
      String sLastError = null;
      ActOpnd actOpnd1 = null;
      ActOpnd[] actOpnds = null;
      String sOpndId = null;
      
      // "Delete deny" could have an empty set of first operands,
      // meaning any user.
      if (attr == null) {
        actOpnd1 = new ActOpnd("*", PM_NODE_USER, "*", false, false, null);
      } else {
        // There should be only one first operand - a user or a user attribute.
        sOpndId = (String)attr.get();
        // Get the runtime action operand
        actOpnds = evalOpnd(eventCtx, sOpndId);
        sLastError = actOpnds[0].getError();
***** ..\OLDPMSERVER\PMENGINE.JAVA
      Attributes actAttrs = ctx.getAttributes("CN=" + sActionId + "," + sRuleContainerDN);
      Attribute attr = actAttrs.get("pmOpnd1");
      if (attr == null) return failure("No operand 1 in \"Delete assignment\" action");
      HashSet hsOpnd1 = new HashSet();
      String sLastError = null;
      for (NamingEnumeration enum = attr.getAll(); enum.hasMore(); ) {
        String sOpndId = (String)enum.next();
        // Get the runtime action operand and insert it into the HashSet of
        // first operands. Most often, the run-time operand is the same as the
        // compile-time operand. A function operand at run-time is different.
        ActOpnd[] actOpnds = evalOpnd(eventCtx, sOpndId);
        sLastError = actOpnds[0].getError();
*****

***** PmEngine.java
        if (sLastError != null) {
          System.out.println("Last error when evaluating operand 1: " + sLastError);
          return failure("No first operands in \"Delete deny\". Last error was: " + sLastError);
        }
        actOpnd1 = actOpnds[0];
      }
      printOpnd(actOpnd1, "First operand in \"Delete deny\"");
      
***** ..\OLDPMSERVER\PMENGINE.JAVA
        if (sLastError != null) {
          System.out.println("Last error in evalOpnd was: " + sLastError);
          continue;
        }
        for (int i = 0; i < actOpnds.length; i++) hsOpnd1.add(actOpnds[i]);
      }
      printOpndSet(hsOpnd1, "Set of first operands in \"Delete assignment\"");
      if (hsOpnd1.isEmpty()) {
        System.out.println("No first operands in deassign. Last error was: " + sLastError);
        return failure("No first operands in deassign. Last error was: " + sLastError);
      }
      
*****

***** PmEngine.java
      attr = actAttrs.get("pmOpnd2");
      if (attr == null)
        return failure("No operand 2 in \"Delete deny\" action " + sActionId);
      HashSet hsOpnd2 = new HashSet();
***** ..\OLDPMSERVER\PMENGINE.JAVA
      attr = actAttrs.get("pmOpnd2");
      if (attr == null) return failure("No operand 2 in \"Delete assignment\" action");
      HashSet hsOpnd2 = new HashSet();
*****

***** PmEngine.java
      for (NamingEnumeration enum = attr.getAll(); enum.hasMore(); ) {
        sOpndId = (String)enum.next();
        actOpnds = evalOpnd(eventCtx, sOpndId);
        sLastError = actOpnds[0].getError();
***** ..\OLDPMSERVER\PMENGINE.JAVA
      for (NamingEnumeration enum = attr.getAll(); enum.hasMore(); ) {
        String sOpndId = (String)enum.next();
        ActOpnd[] actOpnds = evalOpnd(eventCtx, sOpndId);
        sLastError = actOpnds[0].getError();
*****

***** PmEngine.java
        if (sLastError != null) {
          System.out.println("Last error when evaluating operand 2: " + sLastError);
          continue;
***** ..\OLDPMSERVER\PMENGINE.JAVA
        if (sLastError != null) {
          System.out.println("Last error in evalOpnd was: " + sLastError);
          continue;
*****

***** PmEngine.java
      }
      printOpndSet(hsOpnd2, "Set of second operands in \"Delete deny\"");
      if (hsOpnd2.isEmpty())
        return failure("No second operands in \"Deny\". Last error was: " + sLastError);

      attr = actAttrs.get("pmOpnd3");
      if (attr == null) return failure("No operand 3 in \"Delete deny\" action " + sActionId);
      HashSet hsOpnd3 = new HashSet();
      for (NamingEnumeration enum = attr.getAll(); enum.hasMore(); ) {
        sOpndId = (String)enum.next();
        actOpnds = evalOpnd(eventCtx, sOpndId);
        sLastError = actOpnds[0].getError();
        if (sLastError != null) {
          System.out.println("Last error when evaluating operand 3: " + sLastError);
          continue;
        }
        for (int i = 0; i < actOpnds.length; i++) hsOpnd3.add(actOpnds[i]);
      }
      printOpndSet(hsOpnd3, "Set of third operands in \"Delete deny\"");
      if (hsOpnd3.isEmpty())
        return failure("No third operands in \"Delete deny\". Last error was: " + sLastError);

      // Generate a name for the deny constraint.
      Random random = new Random();
      byte[] bytes = new byte[4];
      random.nextBytes(bytes);
      String sDenyName = byteArray2HexString(bytes);
      System.out.println("============deny name is " + sDenyName);
      String sType = actOpnd1.getType();
      String sDenyType = null;
      if (sType.equalsIgnoreCase(PM_NODE_USER)) {
        sDenyType = PM_DENY_USER_ID;
      } else if (sType.equalsIgnoreCase(PM_NODE_UATTR)) {
        sDenyType = PM_DENY_ATTR_OVERALL;
        if (bIntrasession) sDenyType = PM_DENY_ATTR_SESSION;
      } else {
        return failure("Incorrect type for first \"Delete deny\" operand");
      }
***** ..\OLDPMSERVER\PMENGINE.JAVA
      }
      printOpndSet(hsOpnd2, "Set of second operands in \"Delete assignment\"");
      if (hsOpnd2.isEmpty()) {
        System.out.println("No second operands in \"Delete assignment\". Last error was: " + sLastError);
        return failure("No second operands in \"Delete assignment\". Last error was: " + sLastError);
      }
*****

***** PmEngine.java
      
      String sExistingDeny = getSimilarDeny(sDenyType, actOpnd1.getName(),
        actOpnd1.getId(), bIntersection, hsOpnd2, hsOpnd3);
      if (sExistingDeny == null) return failure("No such deny exists");
      return deleteDenyInternal(sExistingDeny, null, null, null);
    } catch (Exception e) {
***** ..\OLDPMSERVER\PMENGINE.JAVA
      
      // Deassign each operand1 from each operand2. Even if there is an error,
      // try to perform as much as possible and then report.
      Iterator iter1 = hsOpnd1.iterator();
      Iterator iter2 = hsOpnd2.iterator();
     
      while (iter1.hasNext()) {
        ActOpnd opnd1 = (ActOpnd)iter1.next();
        while (iter2.hasNext()) {
          ActOpnd opnd2 = (ActOpnd)iter2.next();
          ArrayList result = (ArrayList)deleteAssignmentInternal(opnd1.getId(), opnd1.getType(),
            opnd2.getId(), opnd2.getType());
          if (isFailure(result)) {
            sLastError = ((String)result.get(0)).substring(4);
          }
        }
      }
      if (sLastError != null) return failure(sLastError);
    } catch (Exception e) {
*****

***** PmEngine.java
    }
  }
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    return success();
  }
*****

***** PmEngine.java
  
  private Object deleteSimilarDenies() {
    return null;
  }

  private Object applyActionAssign(EventContext eventCtx, String sActionId) {
    try {
***** ..\OLDPMSERVER\PMENGINE.JAVA
  
  private Object applyActionDeleteDeny(EventContext eventCtx, String sActionId) {
    try {
*****

***** PmEngine.java
      Attributes actAttrs = ctx.getAttributes("CN=" + sActionId + "," + sRuleContainerDN);
      Attribute attr = actAttrs.get("pmOpnd1");
      if (attr == null) return failure("No operand 1 in \"Assign\" action");
      HashSet hsOpnd1 = new HashSet();
      String sLastError = null;
      for (NamingEnumeration enum = attr.getAll(); enum.hasMore(); ) {
        String sOpndId = (String)enum.next();
        // Get the runtime action operand and insert it into the HashSet of
        // first operands. Most often, the run-time operand is the same as the
        // compile-time operand. A function operand at run-time is different.
        ActOpnd[] actOpnds = evalOpnd(eventCtx, sOpndId);
        sLastError = actOpnds[0].getError();
***** ..\OLDPMSERVER\PMENGINE.JAVA
      Attributes actAttrs = ctx.getAttributes("CN=" + sActionId + "," + sRuleContainerDN);
      Attribute attr = actAttrs.get("pmIsIntrasession");
      if (attr == null) return failure("No intrasession attribute in \"Delete deny\" action " + sActionId);
      boolean bIntrasession = ((String)attr.get()).equals("TRUE");
      attr = actAttrs.get("pmIsIntersection");
      if (attr == null) return failure("No intersection attribute in \"Delete deny\" action " + sActionId);
      boolean bIntersection = ((String)attr.get()).equals("TRUE");

      attr = actAttrs.get("pmOpnd1");
      
      String sLastError = null;
      ActOpnd actOpnd1 = null;
      ActOpnd[] actOpnds = null;
      String sOpndId = null;
      
      // "Delete deny" could have an empty set of first operands,
      // meaning any user.
      if (attr == null) {
        actOpnd1 = new ActOpnd("*", PM_NODE_USER, "*", false, false, null);
      } else {
        // There should be only one first operand - a user or a user attribute.
        sOpndId = (String)attr.get();
        // Get the runtime action operand
        actOpnds = evalOpnd(eventCtx, sOpndId);
        sLastError = actOpnds[0].getError();
*****

***** PmEngine.java
        if (sLastError != null) {
          System.out.println("Last error in evalOpnd was: " + sLastError);
          continue;
        }
        for (int i = 0; i < actOpnds.length; i++) hsOpnd1.add(actOpnds[i]);
      }
      printOpndSet(hsOpnd1, "Set of first operands in \"Assign\"");
      if (hsOpnd1.isEmpty()) {
        System.out.println("No first operands in assign. Last error was: " + sLastError);
        return failure("No first operands in assign. Last error was: " + sLastError);
      }
      
***** ..\OLDPMSERVER\PMENGINE.JAVA
        if (sLastError != null) {
          System.out.println("Last error when evaluating operand 1: " + sLastError);
          return failure("No first operands in \"Delete deny\". Last error was: " + sLastError);
        }
        actOpnd1 = actOpnds[0];
      }
      printOpnd(actOpnd1, "First operand in \"Delete deny\"");
      
*****

***** PmEngine.java
      attr = actAttrs.get("pmOpnd2");
      if (attr == null) return failure("No operand 2 in \"Assign\" action");
      HashSet hsOpnd2 = new HashSet();
***** ..\OLDPMSERVER\PMENGINE.JAVA
      attr = actAttrs.get("pmOpnd2");
      if (attr == null)
        return failure("No operand 2 in \"Delete deny\" action " + sActionId);
      HashSet hsOpnd2 = new HashSet();
*****

***** PmEngine.java
      for (NamingEnumeration enum = attr.getAll(); enum.hasMore(); ) {
        String sOpndId = (String)enum.next();
        ActOpnd[] actOpnds = evalOpnd(eventCtx, sOpndId);
        sLastError = actOpnds[0].getError();
***** ..\OLDPMSERVER\PMENGINE.JAVA
      for (NamingEnumeration enum = attr.getAll(); enum.hasMore(); ) {
        sOpndId = (String)enum.next();
        actOpnds = evalOpnd(eventCtx, sOpndId);
        sLastError = actOpnds[0].getError();
*****

***** PmEngine.java
        if (sLastError != null) {
          System.out.println("Last error in evalOpnd was: " + sLastError);
          continue;
***** ..\OLDPMSERVER\PMENGINE.JAVA
        if (sLastError != null) {
          System.out.println("Last error when evaluating operand 2: " + sLastError);
          continue;
*****

***** PmEngine.java
      }
      printOpndSet(hsOpnd2, "Set of second operands in \"Assign\"");
      if (hsOpnd2.isEmpty()) {
        System.out.println("No second operands in \"Assign\". Last error was: " + sLastError);
        return failure("No second operands in \"Assign\". Last error was: " + sLastError);
      }
***** ..\OLDPMSERVER\PMENGINE.JAVA
      }
      printOpndSet(hsOpnd2, "Set of second operands in \"Delete deny\"");
      if (hsOpnd2.isEmpty())
        return failure("No second operands in \"Deny\". Last error was: " + sLastError);

      attr = actAttrs.get("pmOpnd3");
      if (attr == null) return failure("No operand 3 in \"Delete deny\" action " + sActionId);
      HashSet hsOpnd3 = new HashSet();
      for (NamingEnumeration enum = attr.getAll(); enum.hasMore(); ) {
        sOpndId = (String)enum.next();
        actOpnds = evalOpnd(eventCtx, sOpndId);
        sLastError = actOpnds[0].getError();
        if (sLastError != null) {
          System.out.println("Last error when evaluating operand 3: " + sLastError);
          continue;
        }
        for (int i = 0; i < actOpnds.length; i++) hsOpnd3.add(actOpnds[i]);
      }
      printOpndSet(hsOpnd3, "Set of third operands in \"Delete deny\"");
      if (hsOpnd3.isEmpty())
        return failure("No third operands in \"Delete deny\". Last error was: " + sLastError);

      // Generate a name for the deny constraint.
      Random random = new Random();
      byte[] bytes = new byte[4];
      random.nextBytes(bytes);
      String sDenyName = byteArray2HexString(bytes);
      System.out.println("============deny name is " + sDenyName);
      String sType = actOpnd1.getType();
      String sDenyType = null;
      if (sType.equalsIgnoreCase(PM_NODE_USER)) {
        sDenyType = PM_DENY_USER_ID;
      } else if (sType.equalsIgnoreCase(PM_NODE_UATTR)) {
        sDenyType = PM_DENY_ATTR_OVERALL;
        if (bIntrasession) sDenyType = PM_DENY_ATTR_SESSION;
      } else {
        return failure("Incorrect type for first \"Delete deny\" operand");
      }
*****

***** PmEngine.java
      
      // Assign each operand1 to each operand2. Even if there is an error,
      // try to perform as much as possible and then report.
      Iterator iter1 = hsOpnd1.iterator();
      Iterator iter2 = hsOpnd2.iterator();
     
      while (iter1.hasNext()) {
        ActOpnd opnd1 = (ActOpnd)iter1.next();
        while (iter2.hasNext()) {
          ActOpnd opnd2 = (ActOpnd)iter2.next();
          ArrayList result = (ArrayList)assignInternal(opnd1.getId(), opnd1.getType(),
            opnd2.getId(), opnd2.getType());
          if (isFailure(result)) {
            sLastError = ((String)result.get(0)).substring(4);
          }
        }
      }
      if (sLastError != null) return failure(sLastError);
    } catch (Exception e) {
***** ..\OLDPMSERVER\PMENGINE.JAVA
      
      String sExistingDeny = getSimilarDeny(sDenyType, actOpnd1.getName(),
        actOpnd1.getId(), bIntersection, hsOpnd2, hsOpnd3);
      if (sExistingDeny == null) return failure("No such deny exists");
      return deleteDenyInternal(sExistingDeny, null, null, null);
    } catch (Exception e) {
*****

***** PmEngine.java
    }
    return success();
  }
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
  }
*****

***** PmEngine.java
  
  private void printOpndSet(HashSet opndSet, String caption) {
    Iterator iter = opndSet.iterator();
    
    System.out.println(caption);
    while (iter.hasNext()) {
      System.out.print("  Operand (");
      ActOpnd actOpnd = (ActOpnd)iter.next();
      System.out.print("name=" + actOpnd.getName());
      System.out.print(", type=" + actOpnd.getType());
      System.out.print(", id=" + actOpnd.getId());
      System.out.print(", err=" + actOpnd.getError());
      System.out.println(")");
    }
  }
  
  private void printOpnd(ActOpnd actOpnd, String caption) {
    System.out.println(caption);
    System.out.print("  Operand (");
    System.out.print("name=" + actOpnd.getName());
    System.out.print(", type=" + actOpnd.getType());
    System.out.print(", id=" + actOpnd.getId());
    System.out.print(", err=" + actOpnd.getError());
    System.out.println(")");
  }
***** ..\OLDPMSERVER\PMENGINE.JAVA
  
  private Object deleteSimilarDenies() {
    return null;
  }
*****

***** PmEngine.java

  // Evaluate an action operand (an object of AD class pmClassOperand),
  // pointed to by sOpndId. It has the following attributes:
  // pmId, pmType, pmIsFunction, pmIsSubgraph, pmIsComplement,
  // pmOriginalName, pmOriginalId, pmArgs.
  // If the operand is function, pmArgs is a list of pointers to its arguments
  // (which are operands); pmOriginalName and pmOriginalId are the function's
  // name and id.
  // If it's not a function, the operand could be a PM entity, and then
  // the pmOriginalName and pmOriginalId are the name and id of that entity.
  // If it's not a PM entity, the operand could be a word, and then the
  // pmOriginalName is that word, and pmOriginalId should be ignored.
  // For example, the operand could be the name of an operation,
  // like "File write", or a property like "homeof=gigi".
  // The return value is an object of Java class ActOpnd, which contains
  // the name, type, and id of a PM entity, whether it represents a subgraph,
  // or if it's to be interpreted as the complement of a container.
  // It also contains an error message, which, if null, indicates successful
  // evaluation.
  // NOTE THAT THE RESULT OF AN EVALUATION IS ALWAYS AN ARRAY OF ActOpnd objects.
  // From an operand which is argument of a function, we retain only the
  // first array component.
  private ActOpnd[] evalOpnd(EventContext eventCtx, String sOpndId) {
    System.out.println("EvalOpnd " + sOpndId);
    ActOpnd[] res = new ActOpnd[1];
    try {
      Attributes opndAttrs = ctx.getAttributes("CN=" + sOpndId + "," + sRuleContainerDN);
      String sIsFun = (String)opndAttrs.get("pmIsFunction").get();
      boolean isFun = sIsFun.equals("TRUE");
      String sType = (String)opndAttrs.get("pmType").get();
      Attribute attr = opndAttrs.get("pmOriginalId");
      if (attr == null && !sType.equalsIgnoreCase(PM_OP)) {
        res[0] = new ActOpnd(null, null, null, false, false, "Missing id of operand " + sOpndId);
        return res;
      }
      String sOrigId = null;
      if (attr != null) sOrigId = (String)attr.get();
      
      attr = opndAttrs.get("pmOriginalName");
      if (attr == null) {
        res[0] = new ActOpnd(null, null, null, false, false, "Missing name of operand " + sOpndId);
        return res;
      }
      String sOrigName = (String)attr.get();
      
      attr = opndAttrs.get("pmIsSubgraph");
      if (attr == null) {
        res[0] = new ActOpnd(null, null, null, false, false, "Missing subgraph specification in operand " + sOpndId);
        return res;
      }
      boolean isSubgraph = ((String)attr.get()).equals("TRUE");
      
      attr = opndAttrs.get("pmIsComplement");
      if (attr == null) {
        res[0] = new ActOpnd(null, null, null, false, false, "Missing complement specification in operand " + sOpndId);
        return res;
      }
      boolean isComplement = ((String)attr.get()).equals("TRUE");

      // If the operand is not a function, return a record containing its name,
      // type, id, isSubgraph, and a null error string.
      if (!isFun) {
        res[0] = new ActOpnd(sOrigName, sType, sOrigId, isSubgraph, isComplement, null);
        return res;
      }
***** ..\OLDPMSERVER\PMENGINE.JAVA

  private Object applyActionAssign(EventContext eventCtx, String sActionId) {
    try {
      Attributes actAttrs = ctx.getAttributes("CN=" + sActionId + "," + sRuleContainerDN);
      Attribute attr = actAttrs.get("pmOpnd1");
      if (attr == null) return failure("No operand 1 in \"Assign\" action");
      HashSet hsOpnd1 = new HashSet();
      String sLastError = null;
      for (NamingEnumeration enum = attr.getAll(); enum.hasMore(); ) {
        String sOpndId = (String)enum.next();
        // Get the runtime action operand and insert it into the HashSet of
        // first operands. Most often, the run-time operand is the same as the
        // compile-time operand. A function operand at run-time is different.
        ActOpnd[] actOpnds = evalOpnd(eventCtx, sOpndId);
        sLastError = actOpnds[0].getError();
        if (sLastError != null) {
          System.out.println("Last error in evalOpnd was: " + sLastError);
          continue;
        }
        for (int i = 0; i < actOpnds.length; i++) hsOpnd1.add(actOpnds[i]);
      }
      printOpndSet(hsOpnd1, "Set of first operands in \"Assign\"");
      if (hsOpnd1.isEmpty()) {
        System.out.println("No first operands in assign. Last error was: " + sLastError);
        return failure("No first operands in assign. Last error was: " + sLastError);
      }
*****

***** PmEngine.java
      
      // If the operand is a function, first evaluate its arguments, put them
      // into a vector to preserve the order, then evaluate the function.
      // Be careful to put in the vector only the first component of the
      // array resulted from the evaluation of an argument.
      Vector funArgs = new Vector();
      attr = opndAttrs.get("pmArgs");
      
      // Function without parameters.
      if (attr == null) {
        res = evalFun(eventCtx, sOrigName, sOrigId, sType, funArgs);
        for (int i = 0; i < res.length; i++) {
          res[i].setSubgraph(isSubgraph);
          res[i].setComplement(isComplement);
        }
        return res;
      }
***** ..\OLDPMSERVER\PMENGINE.JAVA
      
      attr = actAttrs.get("pmOpnd2");
      if (attr == null) return failure("No operand 2 in \"Assign\" action");
      HashSet hsOpnd2 = new HashSet();
      for (NamingEnumeration enum = attr.getAll(); enum.hasMore(); ) {
        String sOpndId = (String)enum.next();
        ActOpnd[] actOpnds = evalOpnd(eventCtx, sOpndId);
        sLastError = actOpnds[0].getError();
        if (sLastError != null) {
          System.out.println("Last error in evalOpnd was: " + sLastError);
          continue;
        }
        for (int i = 0; i < actOpnds.length; i++) hsOpnd2.add(actOpnds[i]);
      }
      printOpndSet(hsOpnd2, "Set of second operands in \"Assign\"");
      if (hsOpnd2.isEmpty()) {
        System.out.println("No second operands in \"Assign\". Last error was: " + sLastError);
        return failure("No second operands in \"Assign\". Last error was: " + sLastError);
      }
*****

***** PmEngine.java
      
      // Function with parameters. Its parameters' ids are
      // separated by "|".
      String sArgIds = (String)attr.get();
      if (sArgIds == null || sArgIds.length() == 0) {
        res[0] = new ActOpnd(null, null, null, false, false,
          "Null or empty function arguments in operand " + sOpndId);
        return res;
      }
      String[] pieces = sArgIds.split(PM_ALT_DELIM_PATTERN);

      // Prepare the vector containing the arguments evaluated.
      // Be careful to put in the vector only the first component of the
      // array resulted from the evaluation of an argument.
      for (int i = 0; i < pieces.length; i++) {
        String sArgId = pieces[i];
        res = evalOpnd(eventCtx, sArgId);
        if (res[0].getError() != null) return res;
        funArgs.addElement(res[0]);//!!!!!!!!!!!!!!!!!!!!!!!!??????????
      }
      
      res = evalFun(eventCtx, sOrigName, sOrigId, sType, funArgs);
      for (int i = 0; i < res.length; i++) {
        res[i].setSubgraph(isSubgraph);
        res[i].setComplement(isComplement);
      }
      return res;
    } catch (Exception e) {
***** ..\OLDPMSERVER\PMENGINE.JAVA
      
      // Assign each operand1 to each operand2. Even if there is an error,
      // try to perform as much as possible and then report.
      Iterator iter1 = hsOpnd1.iterator();
      Iterator iter2 = hsOpnd2.iterator();
     
      while (iter1.hasNext()) {
        ActOpnd opnd1 = (ActOpnd)iter1.next();
        while (iter2.hasNext()) {
          ActOpnd opnd2 = (ActOpnd)iter2.next();
          ArrayList result = (ArrayList)assignInternal(opnd1.getId(), opnd1.getType(),
            opnd2.getId(), opnd2.getType());
          if (isFailure(result)) {
            sLastError = ((String)result.get(0)).substring(4);
          }
        }
      }
      if (sLastError != null) return failure(sLastError);
    } catch (Exception e) {
*****

***** PmEngine.java
      e.printStackTrace();
      res[0] = new ActOpnd(null, null, null, false, false,
        "Exception during evaluation of operand " + sOpndId);
      return res;
    }
  }
***** ..\OLDPMSERVER\PMENGINE.JAVA
      e.printStackTrace();
      return failure("Exception while dispatching event action");
    }
    return success();
  }
*****

***** PmEngine.java
  
  // Evaluate a function. funArgs is a vector containing the runtime function
  // arguments.
  private ActOpnd[] evalFun(EventContext eventCtx, String sFunName, String sFunId,
  String sFunType, Vector funArgs) {
    System.out.println("Evaluating function " + sFunName);
    for (int i = 0; i < funArgs.size(); i++) {
      System.out.println("Argument id = " + ((ActOpnd)funArgs.get(i)).getId());
    }

    // Dispatch the function evaluation to the correct method.
    if (sFunName.equalsIgnoreCase("object_new"))
      return evalFun_object_new(eventCtx, sFunType, funArgs);// 1116
    else if (sFunName.equalsIgnoreCase("oattr_with_name_of_active_attr"))
      return evalFun_oattr_with_name_of_active_attr(eventCtx, sFunType, funArgs);// 1117 
    else if (sFunName.equalsIgnoreCase("oattr_of_user_choice"))
      return evalFun_oattr_of_user_choice(eventCtx, sFunType, funArgs);// 1119
    else if (sFunName.equalsIgnoreCase("oattr_of_default_user"))
      return evalFun_oattr_of_default_user(eventCtx, sFunType, funArgs);// 1120
    else if (sFunName.equalsIgnoreCase("oattr_home_of_default_user"))
      return evalFun_oattr_home_of_default_user(eventCtx, sFunType, funArgs);// 1121
    else if (sFunName.equalsIgnoreCase("user_default"))
      return evalFun_user_default(eventCtx, sFunType, funArgs);// 1122
    else if (sFunName.equalsIgnoreCase("prop_home_of_new_user"))
      return evalFun_prop_home_of_new_user(eventCtx, sFunType, funArgs);// 1123
    else if (sFunName.equalsIgnoreCase("uattr_name_of_new_user"))
      return evalFun_uattr_name_of_new_user(eventCtx, sFunType, funArgs);// 1124
    else if (sFunName.equalsIgnoreCase("prop_name_of_new_user"))
      return evalFun_prop_name_of_new_user(eventCtx, sFunType, funArgs);// 1125
    else if (sFunName.equalsIgnoreCase("user_new"))
      return evalFun_user_new(eventCtx, sFunType, funArgs);// 1126
    else if (sFunName.equalsIgnoreCase("uattr_name_of_user"))
      return evalFun_uattr_name_of_user(eventCtx, sFunType, funArgs);// 1127
    else if (sFunName.equalsIgnoreCase("prop_name_of_user"))
      return evalFun_prop_name_of_user(eventCtx, sFunType, funArgs);// 1128
    else if (sFunName.equalsIgnoreCase("pol_discr"))
      return evalFun_pol_discr(eventCtx, sFunType, funArgs);// 1129
    else if (sFunName.equalsIgnoreCase("pol_id"))
      return evalFun_pol_id(eventCtx, sFunType, funArgs);// 1130
    else if (sFunName.equalsIgnoreCase("pol_with_prop"))
      return evalFun_pol_with_prop(eventCtx, sFunType, funArgs);// 1131
    else if (sFunName.equalsIgnoreCase("oattr_home_of_new_user"))
      return evalFun_oattr_home_of_new_user(eventCtx, sFunType, funArgs);// 1132
    else if (sFunName.equalsIgnoreCase("oattr_home_of_user"))
      return evalFun_oattr_home_of_user(eventCtx, sFunType, funArgs);// 1133
    else if (sFunName.equalsIgnoreCase("obj_rep_of_home_of_new_user"))
      return evalFun_obj_rep_of_home_of_new_user(eventCtx, sFunType, funArgs);// 1134
    else if (sFunName.equalsIgnoreCase("obj_rep_of_home_of_user"))
      return evalFun_obj_rep_of_home_of_user(eventCtx, sFunType, funArgs);// 1135
    else if (sFunName.equalsIgnoreCase("oattr_rep_of_home_of_new_user"))
      return evalFun_oattr_rep_of_home_of_new_user(eventCtx, sFunType, funArgs);// 1136
    else if (sFunName.equalsIgnoreCase("oattr_rep_of_home_of_user"))
      return evalFun_oattr_rep_of_home_of_user(eventCtx, sFunType, funArgs);// 1137
    else if (sFunName.equalsIgnoreCase("oattr_rep_of_discr_users"))
      return evalFun_oattr_rep_of_discr_users(eventCtx, sFunType, funArgs);// 1138
    else if (sFunName.equalsIgnoreCase("uattr_discr_users"))
      return evalFun_uattr_discr_users(eventCtx, sFunType, funArgs);// 1139
    else if (sFunName.equalsIgnoreCase("oattr_of_default_obj"))
      return evalFun_oattr_of_default_obj(eventCtx, sFunType, funArgs);// 1140
    else if (sFunName.equalsIgnoreCase("uattr_lowest_level"))
      return evalFun_uattr_lowest_level(eventCtx, sFunType, funArgs);// 1141
    else if (sFunName.equalsIgnoreCase("oattr_direct_asc_of_and_containing"))
      return evalFun_oattr_direct_asc_of_and_containing(eventCtx, sFunType, funArgs);// 1142
    else if (sFunName.equalsIgnoreCase("uattr_direct_ascs_of_uattr"))
      return evalFun_uattr_direct_ascs_of_uattr(eventCtx, sFunType, funArgs);// 1143
    else if (sFunName.equalsIgnoreCase("uattr_direct_ascs_of_uattr_except"))
      return evalFun_uattr_direct_ascs_of_uattr_except(eventCtx, sFunType, funArgs);// 1144
    else if (sFunName.equalsIgnoreCase("uattr_active_in_default_session_and_in_uattr")) {
      return evalFun_uattr_active_in_default_session_and_in_uattr(eventCtx, sFunType, funArgs);// 1145
    }
    else {
      ActOpnd[] err = new ActOpnd[1];
      err[0] = new ActOpnd(null, null, null, false, false,
        "Function " + sFunName + " not implemented!");
      return err;
    }
***** ..\OLDPMSERVER\PMENGINE.JAVA
  
  private void printOpndSet(HashSet opndSet, String caption) {
    Iterator iter = opndSet.iterator();
    
    System.out.println(caption);
    while (iter.hasNext()) {
      System.out.print("  Operand (");
      ActOpnd actOpnd = (ActOpnd)iter.next();
      System.out.print("name=" + actOpnd.getName());
      System.out.print(", type=" + actOpnd.getType());
      System.out.print(", id=" + actOpnd.getId());
      System.out.print(", err=" + actOpnd.getError());
      System.out.println(")");
    }
*****

***** PmEngine.java
  
  // The object_new() function returns an ActOpnd containing the object
  // attribute associated with the newly created object, if the event
  // who triggered its evaluation was "Object create". Otherwise, it
  // returns an error ActOpnd.
  // Parameters: none. It uses the event context to extract info.
  private ActOpnd[] evalFun_object_new(EventContext eventCtx, String sFunType,
  Vector funArgs) {
    ActOpnd[] res = new ActOpnd[1];
    
    // The event context should contain the virtual object name and id,
    // and the function type is PM_OBJ. This function needs to return the
    // object attribute associated to the virtual object.
    if (!eventCtx.getEventName().equalsIgnoreCase(PM_EVENT_OBJECT_CREATE)) {
      res[0] = new ActOpnd(null, null, null, false, false, "Event is not \"Object create\"!");
      return res;
    }
    String sObjId = eventCtx.getObjId();
    if (sObjId == null) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Null object id in the context");
      return res;
    }
    String sId = getAssocOattr(sObjId);
    if (sId == null) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "No object attribute associated to object " + eventCtx.getObjId());
      return res;
    }
    res[0] = new ActOpnd(eventCtx.getObjName(), PM_NODE_OATTR, sId, false, false, null);
    return res;
  }
***** ..\OLDPMSERVER\PMENGINE.JAVA
  
  private void printOpnd(ActOpnd actOpnd, String caption) {
    System.out.println(caption);
    System.out.print("  Operand (");
    System.out.print("name=" + actOpnd.getName());
    System.out.print(", type=" + actOpnd.getType());
    System.out.print(", id=" + actOpnd.getId());
    System.out.print(", err=" + actOpnd.getError());
    System.out.println(")");
  }
*****

***** PmEngine.java

  // Returns the user attribute uaa, which is active in the default session and
  // uaa ->+ uaarg, where uaarg is the first argument (a user attribute).
  private ActOpnd[] evalFun_uattr_active_in_default_session_and_in_uattr(EventContext eventCtx,
  String sFunType, Vector funArgs) {
    ActOpnd[] res = new ActOpnd[1];
    
    if (funArgs.isEmpty() || funArgs.size() != 1) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Incorrect number of arguments for function uattr_active_in_default_session_and_in_uattr");
      return res;
    }
    
    ActOpnd arg = (ActOpnd)funArgs.get(0);
    if (!arg.getType().equalsIgnoreCase(PM_NODE_UATTR)) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "First argument of uattr_active_in_default_session_and_in_uattr is not a user attribute");
      return res;
    }
    String sUattrId1 = arg.getId();
    
    HashSet actives = getSessionActiveAttrSet(eventCtx.getSessId());
    if (actives.isEmpty()) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "No user attributes active in the event context");
      return res;
    }
    Iterator iter = actives.iterator();
    while (iter.hasNext()) {
      String sUattrId = (String)iter.next();
      if (attrIsAscendant(sUattrId, sUattrId1, PM_NODE_UATTR)) {
        String sUattrName = getEntityName(sUattrId, PM_NODE_UATTR);
        res[0] = new ActOpnd(sUattrName, PM_NODE_UATTR, sUattrId, false, false, null);
        return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA

  // Evaluate an action operand (an object of AD class pmClassOperand),
  // pointed to by sOpndId. It has the following attributes:
  // pmId, pmType, pmIsFunction, pmIsSubgraph, pmIsComplement,
  // pmOriginalName, pmOriginalId, pmArgs.
  // If the operand is function, pmArgs is a list of pointers to its arguments
  // (which are operands); pmOriginalName and pmOriginalId are the function's
  // name and id.
  // If it's not a function, the operand could be a PM entity, and then
  // the pmOriginalName and pmOriginalId are the name and id of that entity.
  // If it's not a PM entity, the operand could be a word, and then the
  // pmOriginalName is that word, and pmOriginalId should be ignored.
  // For example, the operand could be the name of an operation,
  // like "File write", or a property like "homeof=gigi".
  // The return value is an object of Java class ActOpnd, which contains
  // the name, type, and id of a PM entity, whether it represents a subgraph,
  // or if it's to be interpreted as the complement of a container.
  // It also contains an error message, which, if null, indicates successful
  // evaluation.
  // NOTE THAT THE RESULT OF AN EVALUATION IS ALWAYS AN ARRAY OF ActOpnd objects.
  // From an operand which is argument of a function, we retain only the
  // first array component.
  private ActOpnd[] evalOpnd(EventContext eventCtx, String sOpndId) {
    System.out.println("EvalOpnd " + sOpndId);
    ActOpnd[] res = new ActOpnd[1];
    try {
      Attributes opndAttrs = ctx.getAttributes("CN=" + sOpndId + "," + sRuleContainerDN);
      String sIsFun = (String)opndAttrs.get("pmIsFunction").get();
      boolean isFun = sIsFun.equals("TRUE");
      String sType = (String)opndAttrs.get("pmType").get();
      Attribute attr = opndAttrs.get("pmOriginalId");
      if (attr == null && !sType.equalsIgnoreCase(PM_OP) && !sType.equalsIgnoreCase(PM_LABEL)) {
        res[0] = new ActOpnd(null, null, null, false, false, "Missing id of operand " + sOpndId);
        return res;
*****

***** PmEngine.java
      }
    }
    res[0] = new ActOpnd(null, null, null, false, false,
      "No active attribute contained in " + getEntityName(sUattrId1, PM_NODE_UATTR));
    return res;
  }

  
  // The oattr_with_name_of_active_attr() function returns an ActOpnd
  // containing the object attribute with the same name as the subject's
  // active attribute in a specified policy class.
  // Parameters: the policy class.
  private ActOpnd[] evalFun_oattr_with_name_of_active_attr(EventContext eventCtx,
  String sFunType, Vector funArgs) {
    ActOpnd[] res = new ActOpnd[1];
    
    if (funArgs.isEmpty() || funArgs.size() != 1) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Incorrect number of arguments for function oattr_with_name_of_active_attr");
      return res;
    }
    
    ActOpnd arg = (ActOpnd)funArgs.get(0);
    if (!arg.getType().equalsIgnoreCase(PM_NODE_POL)) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Argument of function oattr_with_name_of_active_attr is not a policy class");
      return res;
    }
    String sPolId = arg.getId();
    HashSet hs = getPolicyActiveAttributes(eventCtx.getSessId(), sPolId);
    if (hs.isEmpty()) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "No user attributes active in the event context and policy " + arg.getName());
      return res;
    }
    Iterator iter = hs.iterator();
    while (iter.hasNext()) {
      String sUattrId = (String)iter.next();
      String sUattrName = getEntityName(sUattrId, PM_NODE_UATTR);
      if (sUattrName == null) {
        res[0] = new ActOpnd(null, null, null, false, false, "No user attribute of id " + sUattrId);
        return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
      }
      String sOrigId = null;
      if (attr != null) sOrigId = (String)attr.get();
      
      attr = opndAttrs.get("pmOriginalName");
      if (attr == null) {
        res[0] = new ActOpnd(null, null, null, false, false, "Missing name of operand " + sOpndId);
        return res;
*****

***** PmEngine.java
      }
      String sOattrId = getEntityId(sUattrName, PM_NODE_OATTR);
      if (sOattrId != null) {
        res[0] = new ActOpnd(sUattrName, PM_NODE_OATTR, sOattrId, false, false, null);
        return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
      }
      String sOrigName = (String)attr.get();
      
      attr = opndAttrs.get("pmIsSubgraph");
      if (attr == null) {
        res[0] = new ActOpnd(null, null, null, false, false, "Missing subgraph specification in operand " + sOpndId);
        return res;
*****

***** PmEngine.java
      }
    }
    res[0] = new ActOpnd(null, null, null, false, false,
      "No object attribute with name of an active attribute!");
    return res;
  }

  // The oattr_of_user_choice() function returns an ActOpnd
  // containing an object attribute selected by the user app, which is
  // contained in a given policy class.
  // Parameters: the policy class.
  private ActOpnd[] evalFun_oattr_of_user_choice(EventContext eventCtx,
  String sFunType, Vector funArgs) {
    ActOpnd[] res = new ActOpnd[1];
    
    if (funArgs.isEmpty() || funArgs.size() != 1) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Incorrect number of arguments for function oattr_of_user_choice");    
      return res;
    }
    ActOpnd arg = (ActOpnd)funArgs.get(0);
    if (!arg.getType().equalsIgnoreCase(PM_NODE_POL)) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Argument of function oattr_of_user_choice is not a policy class");
      return res;
    }
    HashSet selConts = stringToSet(eventCtx.getCtx1());
    if (selConts.isEmpty()) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "No user-selected (oattr) containers!");
      return res;
    }
    Iterator iter = selConts.iterator();
    while (iter.hasNext()) {
      String sOattrName = (String)iter.next();
      String sOattrId = getEntityId(sOattrName, PM_NODE_OATTR);
      if (sOattrId == null) {
        res[0] = new ActOpnd(null, null, null, false, false,
          "No object attribute of name " + sOattrName);
        return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
      }
      boolean isSubgraph = ((String)attr.get()).equals("TRUE");
      
      attr = opndAttrs.get("pmIsComplement");
      if (attr == null) {
        res[0] = new ActOpnd(null, null, null, false, false, "Missing complement specification in operand " + sOpndId);
        return res;
*****

***** PmEngine.java
      }
      if (attrIsAscendantToPolicy(sOattrId, PM_NODE_OATTR, arg.getId())) {
        res[0] = new ActOpnd(sOattrName, PM_NODE_OATTR, sOattrId,  false, false, null);
        return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
      }
      boolean isComplement = ((String)attr.get()).equals("TRUE");

      // If the operand is not a function, return a record containing its name,
      // type, id, isSubgraph, and a null error string.
      if (!isFun) {
        res[0] = new ActOpnd(sOrigName, sType, sOrigId, isSubgraph, isComplement, null);
        return res;
*****

***** PmEngine.java
      }
    }
    res[0] = new ActOpnd(null, null, null, false, false,
      "No user-selected container in policy class " + arg.getName());
    return res;
  }

  // Returns the object attribute with the property:
  //    owner=<user>
  // where <user> is the user of the process that triggered the event.
  // Parameters: None.
  private ActOpnd[] evalFun_oattr_of_default_user(EventContext eventCtx,
  String sFunType, Vector funArgs) {
    ActOpnd[] res = new ActOpnd[1];
    
    String sSessId = eventCtx.getSessId();
    String sUserId = getSessionUserId(sSessId);
    if (sUserId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No user for session " + sSessId);
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
      }
      
      // If the operand is a function, first evaluate its arguments, put them
      // into a vector to preserve the order, then evaluate the function.
      // Be careful to put in the vector only the first component of the
      // array resulted from the evaluation of an argument.
      Vector funArgs = new Vector();
      attr = opndAttrs.get("pmArgs");
      
      // Function without parameters.
      if (attr == null) {
        res = evalFun(eventCtx, sOrigName, sOrigId, sType, funArgs);
        for (int i = 0; i < res.length; i++) {
          res[i].setSubgraph(isSubgraph);
          res[i].setComplement(isComplement);
        }
        return res;
      }
      
      // Function with parameters. Its parameters' ids are
      // separated by "|".
      String sArgIds = (String)attr.get();
      if (sArgIds == null || sArgIds.length() == 0) {
        res[0] = new ActOpnd(null, null, null, false, false,
          "Null or empty function arguments in operand " + sOpndId);
        return res;
      }
      String[] pieces = sArgIds.split(PM_ALT_DELIM_PATTERN);

      // Prepare the vector containing the arguments evaluated.
      // Be careful to put in the vector only the first component of the
      // array resulted from the evaluation of an argument.
      for (int i = 0; i < pieces.length; i++) {
        String sArgId = pieces[i];
        res = evalOpnd(eventCtx, sArgId);
        if (res[0].getError() != null) return res;
        funArgs.addElement(res[0]);//!!!!!!!!!!!!!!!!!!!!!!!!??????????
      }
      
      res = evalFun(eventCtx, sOrigName, sOrigId, sType, funArgs);
      for (int i = 0; i < res.length; i++) {
        res[i].setSubgraph(isSubgraph);
        res[i].setComplement(isComplement);
      }
      return res;
    } catch (Exception e) {
      e.printStackTrace();
      res[0] = new ActOpnd(null, null, null, false, false,
        "Exception during evaluation of operand " + sOpndId);
      return res;
*****

***** PmEngine.java
    }
    String sUser = getEntityName(sUserId, PM_NODE_USER);
    if (sUser == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No user with id " + sUserId);
      return res;
    }
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
  }
  
  // Evaluate a function. funArgs is a vector containing the runtime function
  // arguments.
  private ActOpnd[] evalFun(EventContext eventCtx, String sFunName, String sFunId,
  String sFunType, Vector funArgs) {
    System.out.println("Evaluating function " + sFunName);
    for (int i = 0; i < funArgs.size(); i++) {
      System.out.println("Argument id = " + ((ActOpnd)funArgs.get(i)).getId());
    }
*****

***** PmEngine.java

    // Let's find the oattr with the property:
    String sProp = "owner=" + sUser;
    String sOattrId = getEntityWithProperty(PM_NODE_OATTR, sProp);
System.out.println("=============oattr with property " + sProp + " found " + sOattrId);
    
    if (sOattrId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No object attribute with property " + sProp); 
      return res;
    }
    String sOattr = getEntityName(sOattrId, PM_NODE_OATTR);
    if (sOattr == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No object attribute with id " + sOattrId);
      return res;
    }
    res[0] = new ActOpnd(sOattr, PM_NODE_OATTR, sOattrId, false, false, null);
    return res;
  }

  // Returns all direct ascendants of first argument excepting the second
  // argument. Both arguments are user attributes.
  private ActOpnd[] evalFun_uattr_direct_ascs_of_uattr_except(EventContext eventCtx,
  String sFunType, Vector funArgs) {
    ActOpnd[] err = new ActOpnd[1];
    if (funArgs.isEmpty() || funArgs.size() != 2) {
      err[0] = new ActOpnd(null, null, null, false, false,
        "Incorrect number of arguments for function uattr_direct_ascs_of_uattr_except");
      return err;
***** ..\OLDPMSERVER\PMENGINE.JAVA

    // Dispatch the function evaluation to the correct method.
    if (sFunName.equalsIgnoreCase("object_new"))
      return evalFun_object_new(eventCtx, sFunType, funArgs);// 1116
    else if (sFunName.equalsIgnoreCase("oattr_with_name_of_active_attr"))
      return evalFun_oattr_with_name_of_active_attr(eventCtx, sFunType, funArgs);// 1117 
    else if (sFunName.equalsIgnoreCase("oattr_of_user_choice"))
      return evalFun_oattr_of_user_choice(eventCtx, sFunType, funArgs);// 1119
    else if (sFunName.equalsIgnoreCase("oattr_of_default_user"))
      return evalFun_oattr_of_default_user(eventCtx, sFunType, funArgs);// 1120
    else if (sFunName.equalsIgnoreCase("oattr_home_of_default_user"))
      return evalFun_oattr_home_of_default_user(eventCtx, sFunType, funArgs);// 1121
    else if (sFunName.equalsIgnoreCase("user_default"))
      return evalFun_user_default(eventCtx, sFunType, funArgs);// 1122
    else if (sFunName.equalsIgnoreCase("prop_home_of_new_user"))
      return evalFun_prop_home_of_new_user(eventCtx, sFunType, funArgs);// 1123
    else if (sFunName.equalsIgnoreCase("uattr_name_of_new_user"))
      return evalFun_uattr_name_of_new_user(eventCtx, sFunType, funArgs);// 1124
    else if (sFunName.equalsIgnoreCase("prop_name_of_new_user"))
      return evalFun_prop_name_of_new_user(eventCtx, sFunType, funArgs);// 1125
    else if (sFunName.equalsIgnoreCase("user_new"))
      return evalFun_user_new(eventCtx, sFunType, funArgs);// 1126
    else if (sFunName.equalsIgnoreCase("uattr_name_of_user"))
      return evalFun_uattr_name_of_user(eventCtx, sFunType, funArgs);// 1127
    else if (sFunName.equalsIgnoreCase("prop_name_of_user"))
      return evalFun_prop_name_of_user(eventCtx, sFunType, funArgs);// 1128
    else if (sFunName.equalsIgnoreCase("pol_discr"))
      return evalFun_pol_discr(eventCtx, sFunType, funArgs);// 1129
    else if (sFunName.equalsIgnoreCase("pol_id"))
      return evalFun_pol_id(eventCtx, sFunType, funArgs);// 1130
    else if (sFunName.equalsIgnoreCase("pol_with_prop"))
      return evalFun_pol_with_prop(eventCtx, sFunType, funArgs);// 1131
    else if (sFunName.equalsIgnoreCase("oattr_home_of_new_user"))
      return evalFun_oattr_home_of_new_user(eventCtx, sFunType, funArgs);// 1132
    else if (sFunName.equalsIgnoreCase("oattr_home_of_user"))
      return evalFun_oattr_home_of_user(eventCtx, sFunType, funArgs);// 1133
    else if (sFunName.equalsIgnoreCase("obj_rep_of_home_of_new_user"))
      return evalFun_obj_rep_of_home_of_new_user(eventCtx, sFunType, funArgs);// 1134
    else if (sFunName.equalsIgnoreCase("obj_rep_of_home_of_user"))
      return evalFun_obj_rep_of_home_of_user(eventCtx, sFunType, funArgs);// 1135
    else if (sFunName.equalsIgnoreCase("oattr_rep_of_home_of_new_user"))
      return evalFun_oattr_rep_of_home_of_new_user(eventCtx, sFunType, funArgs);// 1136
    else if (sFunName.equalsIgnoreCase("oattr_rep_of_home_of_user"))
      return evalFun_oattr_rep_of_home_of_user(eventCtx, sFunType, funArgs);// 1137
    else if (sFunName.equalsIgnoreCase("oattr_rep_of_discr_users"))
      return evalFun_oattr_rep_of_discr_users(eventCtx, sFunType, funArgs);// 1138
    else if (sFunName.equalsIgnoreCase("uattr_discr_users"))
      return evalFun_uattr_discr_users(eventCtx, sFunType, funArgs);// 1139
    else if (sFunName.equalsIgnoreCase("oattr_of_default_obj"))
      return evalFun_oattr_of_default_obj(eventCtx, sFunType, funArgs);// 1140
    else if (sFunName.equalsIgnoreCase("uattr_lowest_level"))
      return evalFun_uattr_lowest_level(eventCtx, sFunType, funArgs);// 1141
    else if (sFunName.equalsIgnoreCase("oattr_direct_asc_of_and_containing"))
      return evalFun_oattr_direct_asc_of_and_containing(eventCtx, sFunType, funArgs);// 1142
    else if (sFunName.equalsIgnoreCase("uattr_direct_ascs_of_uattr"))
      return evalFun_uattr_direct_ascs_of_uattr(eventCtx, sFunType, funArgs);// 1143
    else if (sFunName.equalsIgnoreCase("uattr_direct_ascs_of_uattr_except"))
      return evalFun_uattr_direct_ascs_of_uattr_except(eventCtx, sFunType, funArgs);// 1144
    else if (sFunName.equalsIgnoreCase("uattr_active_in_default_session_and_in_uattr")) {
      return evalFun_uattr_active_in_default_session_and_in_uattr(eventCtx, sFunType, funArgs);// 1145
    }
    else {
      ActOpnd[] err = new ActOpnd[1];
      err[0] = new ActOpnd(null, null, null, false, false,
        "Function " + sFunName + " not implemented!");
      return err;
*****

***** PmEngine.java
    }
    ActOpnd arg = (ActOpnd)funArgs.get(0);
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
  }
  
  // The object_new() function returns an ActOpnd containing the object
  // attribute associated with the newly created object, if the event
  // who triggered its evaluation was "Object create". Otherwise, it
  // returns an error ActOpnd.
  // Parameters: none. It uses the event context to extract info.
  private ActOpnd[] evalFun_object_new(EventContext eventCtx, String sFunType,
  Vector funArgs) {
    ActOpnd[] res = new ActOpnd[1];
    
    // The event context should contain the virtual object name and id,
    // and the function type is PM_OBJ. This function needs to return the
    // object attribute associated to the virtual object.
    if (!eventCtx.getEventName().equalsIgnoreCase(PM_EVENT_OBJECT_CREATE)) {
      res[0] = new ActOpnd(null, null, null, false, false, "Event is not \"Object create\"!");
      return res;
    }
    String sObjId = eventCtx.getObjId();
    if (sObjId == null) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Null object id in the context");
      return res;
    }
    String sId = getAssocOattr(sObjId);
    if (sId == null) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "No object attribute associated to object " + eventCtx.getObjId());
      return res;
    }
    res[0] = new ActOpnd(eventCtx.getObjName(), PM_NODE_OATTR, sId, false, false, null);
    return res;
  }

  // Returns the user attribute uaa, which is active in the default session and
  // uaa ->+ uaarg, where uaarg is the first argument (a user attribute).
  private ActOpnd[] evalFun_uattr_active_in_default_session_and_in_uattr(EventContext eventCtx,
  String sFunType, Vector funArgs) {
    ActOpnd[] res = new ActOpnd[1];
    
    if (funArgs.isEmpty() || funArgs.size() != 1) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Incorrect number of arguments for function uattr_active_in_default_session_and_in_uattr");
      return res;
    }
    
    ActOpnd arg = (ActOpnd)funArgs.get(0);
*****

***** PmEngine.java
    if (!arg.getType().equalsIgnoreCase(PM_NODE_UATTR)) {
      err[0] = new ActOpnd(null, null, null, false, false,
        "Argument 1 of function uattr_direct_ascs_of_uattr_except is not a user attribute");
      return err;
    }
***** ..\OLDPMSERVER\PMENGINE.JAVA
    if (!arg.getType().equalsIgnoreCase(PM_NODE_UATTR)) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "First argument of uattr_active_in_default_session_and_in_uattr is not a user attribute");
      return res;
    }
*****

***** PmEngine.java
    String sUattrId1 = arg.getId();
    arg = (ActOpnd)funArgs.get(1);
    if (!arg.getType().equalsIgnoreCase(PM_NODE_UATTR)) {
      err[0] = new ActOpnd(null, null, null, false, false,
        "Argument 2 of function uattr_direct_ascs_of_uattr_except is not a user attribute");
      return err;
    }
    String sUattrId2 = arg.getId();
    
    // Get all direct ascendants of the first argument.
    try {
      Attributes attrs = ctx.getAttributes("CN=" + sUattrId1 + "," + sUserAttrContainerDN);
      Attribute attr = attrs.get("pmFromAttr");
      if (attr == null) {
        err[0] = new ActOpnd(null, null, null, false, false, "No direct ascendants found");
        return err;
      }
      // Let's see if the second argument is one of these ascendants.
      boolean isOne = false;
      for (NamingEnumeration attrEnum = attr.getAll(); attrEnum.hasMore(); ) {
        String sId = (String)attrEnum.next();
        if (sId.equalsIgnoreCase(sUattrId2)) {
          isOne = true;
          break;
        }
      }
      int n = attr.size();
      if (isOne) n--;
      if (n == 0) {
        err[0] = new ActOpnd(null, null, null, false, false, "No ascendants as requested found");
        return err;
      }
      ActOpnd[] result = new ActOpnd[n];
      int i = 0;
      for (NamingEnumeration attrEnum = attr.getAll(); attrEnum.hasMore(); ) {
        String sId = (String)attrEnum.next();
        if (sId.equalsIgnoreCase(sUattrId2)) continue;
        result[i++] = new ActOpnd(getEntityName(sId, PM_NODE_UATTR),
          PM_NODE_UATTR, sId, false, false, null);
      }
      return result;
    } catch (Exception e) {
      if (debugFlag) e.printStackTrace();
      err[0] = new ActOpnd(null, null, null, false, false,
        "Exception: " + e.getMessage());
      return err;
    }
  }
    
  
  private ActOpnd[] evalFun_uattr_direct_ascs_of_uattr(EventContext eventCtx,
  String sFunType, Vector funArgs) {
    ActOpnd[] err = new ActOpnd[1];
    if (funArgs.isEmpty() || funArgs.size() != 1) {
      err[0] = new ActOpnd(null, null, null, false, false,
        "Incorrect number of arguments for function uattr_direct_ascs_of_uattr");
      return err;
    }
***** ..\OLDPMSERVER\PMENGINE.JAVA
    String sUattrId1 = arg.getId();
    
    HashSet actives = getSessionActiveAttrSet(eventCtx.getSessId());
    if (actives.isEmpty()) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "No user attributes active in the event context");
      return res;
    }
    Iterator iter = actives.iterator();
    while (iter.hasNext()) {
      String sUattrId = (String)iter.next();
      if (attrIsAscendant(sUattrId, sUattrId1, PM_NODE_UATTR)) {
        String sUattrName = getEntityName(sUattrId, PM_NODE_UATTR);
        res[0] = new ActOpnd(sUattrName, PM_NODE_UATTR, sUattrId, false, false, null);
        return res;
      }
    }
    res[0] = new ActOpnd(null, null, null, false, false,
      "No active attribute contained in " + getEntityName(sUattrId1, PM_NODE_UATTR));
    return res;
  }

  
  // The oattr_with_name_of_active_attr() function returns an ActOpnd
  // containing the object attribute with the same name as the subject's
  // active attribute in a specified policy class.
  // Parameters: the policy class.
  private ActOpnd[] evalFun_oattr_with_name_of_active_attr(EventContext eventCtx,
  String sFunType, Vector funArgs) {
    ActOpnd[] res = new ActOpnd[1];
    
    if (funArgs.isEmpty() || funArgs.size() != 1) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Incorrect number of arguments for function oattr_with_name_of_active_attr");
      return res;
    }
    
    ActOpnd arg = (ActOpnd)funArgs.get(0);
    if (!arg.getType().equalsIgnoreCase(PM_NODE_POL)) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Argument of function oattr_with_name_of_active_attr is not a policy class");
      return res;
    }
    String sPolId = arg.getId();
    HashSet hs = getPolicyActiveAttributes(eventCtx.getSessId(), sPolId);
    if (hs.isEmpty()) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "No user attributes active in the event context and policy " + arg.getName());
      return res;
    }
    Iterator iter = hs.iterator();
    while (iter.hasNext()) {
      String sUattrId = (String)iter.next();
      String sUattrName = getEntityName(sUattrId, PM_NODE_UATTR);
      if (sUattrName == null) {
        res[0] = new ActOpnd(null, null, null, false, false, "No user attribute of id " + sUattrId);
        return res;
      }
      String sOattrId = getEntityId(sUattrName, PM_NODE_OATTR);
      if (sOattrId != null) {
        res[0] = new ActOpnd(sUattrName, PM_NODE_OATTR, sOattrId, false, false, null);
        return res;
      }
    }
    res[0] = new ActOpnd(null, null, null, false, false,
      "No object attribute with name of an active attribute!");
    return res;
  }

  // The oattr_of_user_choice() function returns an ActOpnd
  // containing an object attribute selected by the user app, which is
  // contained in a given policy class.
  // Parameters: the policy class.
  private ActOpnd[] evalFun_oattr_of_user_choice(EventContext eventCtx,
  String sFunType, Vector funArgs) {
    ActOpnd[] res = new ActOpnd[1];
    
    if (funArgs.isEmpty() || funArgs.size() != 1) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Incorrect number of arguments for function oattr_of_user_choice");    
      return res;
    }
*****

***** PmEngine.java
    ActOpnd arg = (ActOpnd)funArgs.get(0);
    if (!arg.getType().equalsIgnoreCase(PM_NODE_UATTR)) {
      err[0] = new ActOpnd(null, null, null, false, false,
        "Argument of function uattr_direct_ascs_of_uattr is not a user attribute");
      return err;
    }
    String sUattrId = arg.getId();
    // Get all direct ascendants of the first argument.
    try {
      Attributes attrs = ctx.getAttributes("CN=" + sUattrId + "," + sUserAttrContainerDN);
      Attribute attr = attrs.get("pmFromAttr");
      if (attr == null) {
        err[0] = new ActOpnd(null, null, null, false, false, "No direct ascendants found");
        return err;
      }
      int n = attr.size();
      ActOpnd[] result = new ActOpnd[n];
      int i = 0;
      for (NamingEnumeration attrEnum = attr.getAll(); attrEnum.hasMore(); ) {
        String sId = (String)attrEnum.next();
        result[i++] = new ActOpnd(getEntityName(sId, PM_NODE_UATTR),
          PM_NODE_UATTR, sId, false, false, null);
      }
      return result;
    } catch (Exception e) {
      if (debugFlag) e.printStackTrace();
      err[0] = new ActOpnd(null, null, null, false, false,
        "Exception: " + e.getMessage());
      return err;
    }
  }
  
  // Returns an object attribute oa with the property:
  // oa -> oattr1 and oattr2 ->* oa, where oattr1 and oattr2 are its two
  // parameters. It assumes that oa is unique.
  // Parameters: two object attributes oattr1 and oattr2 such that
  // there is a unique oa such that oattr2 ->* oa -> oattr1.
  private ActOpnd[] evalFun_oattr_direct_asc_of_and_containing(EventContext eventCtx,
  String sFunType, Vector funArgs) {
***** ..\OLDPMSERVER\PMENGINE.JAVA
    ActOpnd arg = (ActOpnd)funArgs.get(0);
    if (!arg.getType().equalsIgnoreCase(PM_NODE_POL)) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Argument of function oattr_of_user_choice is not a policy class");
      return res;
    }
    HashSet selConts = stringToSet(eventCtx.getCtx1());
    if (selConts.isEmpty()) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "No user-selected (oattr) containers!");
      return res;
    }
    Iterator iter = selConts.iterator();
    while (iter.hasNext()) {
      String sOattrName = (String)iter.next();
      String sOattrId = getEntityId(sOattrName, PM_NODE_OATTR);
      if (sOattrId == null) {
        res[0] = new ActOpnd(null, null, null, false, false,
          "No object attribute of name " + sOattrName);
        return res;
      }
      if (attrIsAscendantToPolicy(sOattrId, PM_NODE_OATTR, arg.getId())) {
        res[0] = new ActOpnd(sOattrName, PM_NODE_OATTR, sOattrId,  false, false, null);
        return res;
      }
    }
    res[0] = new ActOpnd(null, null, null, false, false,
      "No user-selected container in policy class " + arg.getName());
    return res;
  }

  // Returns the object attribute with the property:
  //    owner=<user>
  // where <user> is the user of the process that triggered the event.
  // Parameters: None.
  private ActOpnd[] evalFun_oattr_of_default_user(EventContext eventCtx,
  String sFunType, Vector funArgs) {
*****

***** PmEngine.java
    
    if (funArgs.isEmpty() || funArgs.size() != 2) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Incorrect number of arguments for function oattr_direct_asc_of_and_containing");
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    
    String sSessId = eventCtx.getSessId();
    String sUserId = getSessionUserId(sSessId);
    if (sUserId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No user for session " + sSessId);
      return res;
*****

***** PmEngine.java
    }
    ActOpnd arg1 = (ActOpnd)funArgs.get(0);
    if (!arg1.getType().equalsIgnoreCase(PM_NODE_OATTR)) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "First argument of function oattr_direct_asc_of_and_containing is not an object attribute");
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    String sUser = getEntityName(sUserId, PM_NODE_USER);
    if (sUser == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No user with id " + sUserId);
      return res;
*****

***** PmEngine.java
    }
    String sOattrId1 = arg1.getId();
System.out.println("First operand is " + arg1.getName());

    ActOpnd arg2 = (ActOpnd)funArgs.get(1);
    if (!arg2.getType().equalsIgnoreCase(PM_NODE_OATTR)) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Second argument of function oattr_direct_asc_containing is not an object attribute");
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }

    // Let's find the oattr with the property:
    String sProp = "owner=" + sUser;
    String sOattrId = getEntityWithProperty(PM_NODE_OATTR, sProp);
System.out.println("=============oattr with property " + sProp + " found " + sOattrId);
    
    if (sOattrId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No object attribute with property " + sProp); 
      return res;
*****

***** PmEngine.java
    }
    String sOattrId2 = arg2.getId();
System.out.println("Second operand is " + arg2.getName());

    // Get all direct ascendants of the first argument.
System.out.println("Walking thru all ascendants of the first argument");
    try {
      Attributes attrs = ctx.getAttributes("CN=" + sOattrId1 + "," + sObjAttrContainerDN);
      Attribute attr = attrs.get("pmFromAttr");
      if (attr != null) for (NamingEnumeration attrEnum = attr.getAll(); attrEnum.hasMore(); ) {
        String sId = (String)attrEnum.next();
System.out.println("For direct ascendant " + sId);
        if (attrIsAscendant(sOattrId2, sId, PM_NODE_OATTR)) {
          res[0] = new ActOpnd(getEntityName(sId, PM_NODE_OATTR), PM_NODE_OATTR, sId,
            false, false, null);
          return res;
        }
      }
    } catch (Exception e) {
      if (debugFlag) e.printStackTrace();
      res[0] = new ActOpnd(null, null, null, false, false,
        "Exception: " + e.getMessage());
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    String sOattr = getEntityName(sOattrId, PM_NODE_OATTR);
    if (sOattr == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No object attribute with id " + sOattrId);
      return res;
*****

***** PmEngine.java
    }
    res[0] = new ActOpnd(null, null, null, false, false, "No container satisfying the requirement was found");
    return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    res[0] = new ActOpnd(sOattr, PM_NODE_OATTR, sOattrId, false, false, null);
    return res;
*****

***** PmEngine.java
  }
  
  // Returns the object attribute associated with the event's object,
  // if the event is Object create, Object write, etc., but not User create, etc.
  //
  // Note that when the event is "Object delete", the id of the associated
  // object attribute cannot be obtained using getAssocId(), because the
  // object no longer exists. Instead, the assoc id is passed to
  // processEvent() and all subsequent functions in Ctx2. All containers
  // the deleted object is assigned to are passed in Ctx1. 
  // Parameters: None.
  private ActOpnd[] evalFun_oattr_of_default_obj(EventContext eventCtx,
  String sFunType, Vector funArgs) {
    ActOpnd[] res = new ActOpnd[1];
    
    String sEventName = eventCtx.getEventName();
    if (!sEventName.startsWith("Object ")) {
      res[0] = new ActOpnd(null, null, null, false, false, "The event is not \"Object ...\"!");
      return res;
    }
    String sObjName = eventCtx.getObjName();
    String sObjId = eventCtx.getObjId();

    // If the event is "Object delete", the assoc id is in Ctx2.
    if (sEventName.equalsIgnoreCase("Object delete")) {
      res[0] = new ActOpnd(sObjName, PM_NODE_OATTR, eventCtx.getCtx2(), false, false, null);
      return res;
    }
    String sActObjId = getEntityId(sObjName, PM_OBJ);
    if (sActObjId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No such object \"" + sObjName + "\"!");
      return res;
    }
    if (!sActObjId.equalsIgnoreCase(sObjId)) {
      res[0] = new ActOpnd(null, null, null, false, false, "Context's object id is not the actual id!");
      return res;
    }
    String sAssocId = getAssocOattr(sObjId);
    if (sAssocId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "Context's object has no associated object attribute!");
      return res;
    }
    res[0] = new ActOpnd(sObjName, PM_NODE_OATTR, sAssocId, false, false, null);
    return res;
  }

  // This function returns the property "homeof=<user>", where <user>
  // is the name of the user just created. The event
  // must be "Create user", the context object must be a user, and the
  // event object class must be "User".
  // Parameters: None.
  private ActOpnd[] evalFun_prop_home_of_new_user(EventContext eventCtx,
  String sFunType, Vector funArgs) {
    ActOpnd[] res = new ActOpnd[1];
    
    String sEventName = eventCtx.getEventName();
    if (!sEventName.equalsIgnoreCase(PM_EVENT_USER_CREATE)) {
      res[0] = new ActOpnd(null, null, null, false, false, "Event is not \"" + PM_EVENT_USER_CREATE + "\"");
      return res;
    }
    String sUserName = eventCtx.getObjName();
    String sClass = eventCtx.getObjClass();
    if (!sClass.equalsIgnoreCase(PM_CLASS_USER_NAME)) {
      res[0] = new ActOpnd(null, null, null, false, false, "Object class is not \"User\"");
      return res;
    }
    String sUserId = getEntityId(sUserName, PM_NODE_USER);
    if (sUserId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No user \"" + sUserName + "\"");
      return res;
    }
    res[0] = new ActOpnd("homeof=" + sUserName, PM_UNKNOWN, null, false, false, null);
    return res;
  }

  // This function returns the property "nameof=<user>", where <user>
  // is the name of the user just created. The event
  // must be "Create user", the context object must be a user, and the
  // event object class must be "User".
  // Parameters: None.
  private ActOpnd[] evalFun_prop_name_of_new_user(EventContext eventCtx,
  String sFunType, Vector funArgs) {
    ActOpnd[] res = new ActOpnd[1];
    
    String sEventName = eventCtx.getEventName();
    if (!sEventName.equalsIgnoreCase(PM_EVENT_USER_CREATE)) {
      res[0] = new ActOpnd(null, null, null, false, false, "Event is not \"" + PM_EVENT_USER_CREATE + "\"");
      return res;
    }
    String sUserName = eventCtx.getObjName();
    String sClass = eventCtx.getObjClass();
    if (!sClass.equalsIgnoreCase(PM_CLASS_USER_NAME)) {
      res[0] = new ActOpnd(null, null, null, false, false, "Object class is not \"User\"");
      return res;
    }
    String sUserId = getEntityId(sUserName, PM_NODE_USER);
    if (sUserId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No user \"" + sUserName + "\"");
      return res;
    }
***** ..\OLDPMSERVER\PMENGINE.JAVA
  }

  // Returns all direct ascendants of first argument excepting the second
  // argument. Both arguments are user attributes.
  private ActOpnd[] evalFun_uattr_direct_ascs_of_uattr_except(EventContext eventCtx,
  String sFunType, Vector funArgs) {
    ActOpnd[] err = new ActOpnd[1];
    if (funArgs.isEmpty() || funArgs.size() != 2) {
      err[0] = new ActOpnd(null, null, null, false, false,
        "Incorrect number of arguments for function uattr_direct_ascs_of_uattr_except");
      return err;
    }
*****

***** PmEngine.java
    }
    res[0] = new ActOpnd("nameof=" + sUserName, PM_UNKNOWN, null, false, false, null);
    return res;
  }

  // Return the new user when the event is "User create".
  // Parameters: None.
  private ActOpnd[] evalFun_user_new(EventContext eventCtx,
  String sFunType, Vector funArgs) {
    ActOpnd[] res = new ActOpnd[1];
    
    String sEventName = eventCtx.getEventName();
    if (!sEventName.equalsIgnoreCase(PM_EVENT_USER_CREATE)) {
      res[0] = new ActOpnd(null, null, null, false, false, "Event is not \"" + PM_EVENT_USER_CREATE + "\"");
      return res;
    }
    String sUserName = eventCtx.getObjName();
    String sClass = eventCtx.getObjClass();
    if (!sClass.equalsIgnoreCase(PM_CLASS_USER_NAME)) {
      res[0] = new ActOpnd(null, null, null, false, false, "Object class is not \"User\"");
      return res;
    }
    String sUserId = getEntityId(sUserName, PM_NODE_USER);
    if (sUserId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No user \"" + sUserName + "\"");
      return res;
    }
    res[0] = new ActOpnd(sUserName, PM_NODE_USER, sUserId, false, false, null);
    return res;
  }

  // Returns the object attribute with the property homeof=<user>,
  // where <user> is the user of the current session.
  // Parameters: None.
  private ActOpnd[] evalFun_oattr_home_of_default_user(EventContext eventCtx,
  String sFunType, Vector funArgs) {
    ActOpnd[] res = new ActOpnd[1];
    
    String sSessId = eventCtx.getSessId();
    String sUserId = getSessionUserId(sSessId);
    if (sUserId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No user for session " + sSessId);
      return res;
    }
    String sUser = getEntityName(sUserId, PM_NODE_USER);
    if (sUser == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No user with id " + sUserId);
      return res;
    }
    // Let's find the oattr with the property:
    String sProp = "homeof=" + sUser;
    String sOattrId = getEntityWithProperty(PM_NODE_OATTR, sProp);
System.out.println("=============oattr with property " + sProp + " found " + sOattrId);
    
    if (sOattrId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No object attribute with property " + sProp);
      return res;
    }
    String sOattr = getEntityName(sOattrId, PM_NODE_OATTR);
    if (sOattr == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No object attribute with id " + sOattrId);
      return res;
    }
    res[0] = new ActOpnd(sOattr, PM_NODE_OATTR, sOattrId, false, false, null);
    return res;
  }
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    ActOpnd arg = (ActOpnd)funArgs.get(0);
    if (!arg.getType().equalsIgnoreCase(PM_NODE_UATTR)) {
      err[0] = new ActOpnd(null, null, null, false, false,
        "Argument 1 of function uattr_direct_ascs_of_uattr_except is not a user attribute");
      return err;
    }
    String sUattrId1 = arg.getId();
    arg = (ActOpnd)funArgs.get(1);
    if (!arg.getType().equalsIgnoreCase(PM_NODE_UATTR)) {
      err[0] = new ActOpnd(null, null, null, false, false,
        "Argument 2 of function uattr_direct_ascs_of_uattr_except is not a user attribute");
      return err;
    }
    String sUattrId2 = arg.getId();
    
    // Get all direct ascendants of the first argument.
    try {
      Attributes attrs = ctx.getAttributes("CN=" + sUattrId1 + "," + sUserAttrContainerDN);
      Attribute attr = attrs.get("pmFromAttr");
      if (attr == null) {
        err[0] = new ActOpnd(null, null, null, false, false, "No direct ascendants found");
        return err;
      }
      // Let's see if the second argument is one of these ascendants.
      boolean isOne = false;
      for (NamingEnumeration attrEnum = attr.getAll(); attrEnum.hasMore(); ) {
        String sId = (String)attrEnum.next();
        if (sId.equalsIgnoreCase(sUattrId2)) {
          isOne = true;
          break;
        }
      }
      int n = attr.size();
      if (isOne) n--;
      if (n == 0) {
        err[0] = new ActOpnd(null, null, null, false, false, "No ascendants as requested found");
        return err;
      }
      ActOpnd[] result = new ActOpnd[n];
      int i = 0;
      for (NamingEnumeration attrEnum = attr.getAll(); attrEnum.hasMore(); ) {
        String sId = (String)attrEnum.next();
        if (sId.equalsIgnoreCase(sUattrId2)) continue;
        result[i++] = new ActOpnd(getEntityName(sId, PM_NODE_UATTR),
          PM_NODE_UATTR, sId, false, false, null);
      }
      return result;
    } catch (Exception e) {
      if (debugFlag) e.printStackTrace();
      err[0] = new ActOpnd(null, null, null, false, false,
        "Exception: " + e.getMessage());
      return err;
    }
  }
    
  
  private ActOpnd[] evalFun_uattr_direct_ascs_of_uattr(EventContext eventCtx,
  String sFunType, Vector funArgs) {
    ActOpnd[] err = new ActOpnd[1];
    if (funArgs.isEmpty() || funArgs.size() != 1) {
      err[0] = new ActOpnd(null, null, null, false, false,
        "Incorrect number of arguments for function uattr_direct_ascs_of_uattr");
      return err;
    }
    ActOpnd arg = (ActOpnd)funArgs.get(0);
    if (!arg.getType().equalsIgnoreCase(PM_NODE_UATTR)) {
      err[0] = new ActOpnd(null, null, null, false, false,
        "Argument of function uattr_direct_ascs_of_uattr is not a user attribute");
      return err;
    }
    String sUattrId = arg.getId();
    // Get all direct ascendants of the first argument.
    try {
      Attributes attrs = ctx.getAttributes("CN=" + sUattrId + "," + sUserAttrContainerDN);
      Attribute attr = attrs.get("pmFromAttr");
      if (attr == null) {
        err[0] = new ActOpnd(null, null, null, false, false, "No direct ascendants found");
        return err;
      }
      int n = attr.size();
      ActOpnd[] result = new ActOpnd[n];
      int i = 0;
      for (NamingEnumeration attrEnum = attr.getAll(); attrEnum.hasMore(); ) {
        String sId = (String)attrEnum.next();
        result[i++] = new ActOpnd(getEntityName(sId, PM_NODE_UATTR),
          PM_NODE_UATTR, sId, false, false, null);
      }
      return result;
    } catch (Exception e) {
      if (debugFlag) e.printStackTrace();
      err[0] = new ActOpnd(null, null, null, false, false,
        "Exception: " + e.getMessage());
      return err;
    }
  }
*****

***** PmEngine.java
  
  // Returns the object attribute which will be the home container of the
  // new user. Its name is "<user> home",
  // where <user> is the new user. The event name must be "User create",
  // the object name must be the new user name, and the object class
  // must be "User".
  // Parameters: None.
  private ActOpnd[] evalFun_oattr_home_of_new_user(EventContext eventCtx,
  String sFunType, Vector funArgs) {
***** ..\OLDPMSERVER\PMENGINE.JAVA
  
  // Returns an object attribute oa with the property:
  // oa -> oattr1 and oattr2 ->* oa, where oattr1 and oattr2 are its two
  // parameters. It assumes that oa is unique.
  // Parameters: two object attributes oattr1 and oattr2 such that
  // there is a unique oa such that oattr2 ->* oa -> oattr1.
  private ActOpnd[] evalFun_oattr_direct_asc_of_and_containing(EventContext eventCtx,
  String sFunType, Vector funArgs) {
*****

***** PmEngine.java
    
    String sEventName = eventCtx.getEventName();
    if (!sEventName.equalsIgnoreCase(PM_EVENT_USER_CREATE)) {
      res[0] = new ActOpnd(null, null, null, false, false, "Event is not \"" + PM_EVENT_USER_CREATE + "\"");
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    
    if (funArgs.isEmpty() || funArgs.size() != 2) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Incorrect number of arguments for function oattr_direct_asc_of_and_containing");
      return res;
*****

***** PmEngine.java
    }
    String sUserName = eventCtx.getObjName();
    String sClass = eventCtx.getObjClass();
    if (!sClass.equalsIgnoreCase(PM_CLASS_USER_NAME)) {
      res[0] = new ActOpnd(null, null, null, false, false, "Object class is not \"User\"");
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    ActOpnd arg1 = (ActOpnd)funArgs.get(0);
    if (!arg1.getType().equalsIgnoreCase(PM_NODE_OATTR)) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "First argument of function oattr_direct_asc_of_and_containing is not an object attribute");
      return res;
*****

***** PmEngine.java
    }
    String sUserId = getEntityId(sUserName, PM_NODE_USER);
    if (sUserId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No user \"" + sUserName + "\"");
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    String sOattrId1 = arg1.getId();
System.out.println("First operand is " + arg1.getName());

    ActOpnd arg2 = (ActOpnd)funArgs.get(1);
    if (!arg2.getType().equalsIgnoreCase(PM_NODE_OATTR)) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Second argument of function oattr_direct_asc_containing is not an object attribute");
      return res;
*****

***** PmEngine.java
    }
    String sHomeName = sUserName + " home";
    String sHomeId = getEntityId(sHomeName, PM_NODE_OATTR);
    res[0] = new ActOpnd(sHomeName, PM_NODE_OATTR, sHomeId, false, false, null);
    return res;
  }

  // Returns the object attribute which is the home container of the
  // user passed as argument. Its name is "<user> home".
  // Parameters: A user.
  private ActOpnd[] evalFun_oattr_home_of_user(EventContext eventCtx,
  String sFunType, Vector funArgs) {
    ActOpnd[] res = new ActOpnd[1];
    
    if (funArgs.isEmpty() || funArgs.size() != 1) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Incorrect number of arguments for function oattr_home_of_user");
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    String sOattrId2 = arg2.getId();
System.out.println("Second operand is " + arg2.getName());

    // Get all direct ascendants of the first argument.
System.out.println("Walking thru all ascendants of the first argument");
    try {
      Attributes attrs = ctx.getAttributes("CN=" + sOattrId1 + "," + sObjAttrContainerDN);
      Attribute attr = attrs.get("pmFromAttr");
      if (attr != null) for (NamingEnumeration attrEnum = attr.getAll(); attrEnum.hasMore(); ) {
        String sId = (String)attrEnum.next();
System.out.println("For direct ascendant " + sId);
        if (attrIsAscendant(sOattrId2, sId, PM_NODE_OATTR)) {
          res[0] = new ActOpnd(getEntityName(sId, PM_NODE_OATTR), PM_NODE_OATTR, sId,
            false, false, null);
          return res;
        }
      }
    } catch (Exception e) {
      if (debugFlag) e.printStackTrace();
      res[0] = new ActOpnd(null, null, null, false, false,
        "Exception: " + e.getMessage());
      return res;
*****

***** PmEngine.java
    }
    ActOpnd arg = (ActOpnd)funArgs.get(0);
    if (!arg.getType().equalsIgnoreCase(PM_NODE_USER)) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Argument of function oattr_home_of_user is not a user");
      return res;
    }
    String sUserName = arg.getName();
    String sHomeName = sUserName + " home";
    String sHomeId = getEntityId(sHomeName, PM_NODE_OATTR);
    res[0] = new ActOpnd(sHomeName, PM_NODE_OATTR, sHomeId, false, false, null);
    return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    res[0] = new ActOpnd(null, null, null, false, false, "No container satisfying the requirement was found");
    return res;
*****

***** PmEngine.java
  }

  // Returns the object that represents the home container of the
  // new user. Its name is "<user> home rep",
  // where <user> is the new user. The event name must be "User create",
  // the object name must be the new user name, and the object class
  // must be "User".
  // Parameters: None.
  private ActOpnd[] evalFun_obj_rep_of_home_of_new_user(EventContext eventCtx,
  String sFunType, Vector funArgs) {
***** ..\OLDPMSERVER\PMENGINE.JAVA
  }
  
  // Returns the object attribute associated with the event's object,
  // if the event is Object create, Object write, etc., but not User create, etc.
  //
  // Note that when the event is "Object delete", the id of the associated
  // object attribute cannot be obtained using getAssocId(), because the
  // object no longer exists. Instead, the assoc id is passed to
  // processEvent() and all subsequent functions in Ctx2. All containers
  // the deleted object is assigned to are passed in Ctx1. 
  // Parameters: None.
  private ActOpnd[] evalFun_oattr_of_default_obj(EventContext eventCtx,
  String sFunType, Vector funArgs) {
*****

***** PmEngine.java
    String sEventName = eventCtx.getEventName();
    if (!sEventName.equalsIgnoreCase(PM_EVENT_USER_CREATE)) {
      res[0] = new ActOpnd(null, null, null, false, false, "Event is not \"" + PM_EVENT_USER_CREATE + "\"");
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    String sEventName = eventCtx.getEventName();
    if (!sEventName.startsWith("Object ")) {
      res[0] = new ActOpnd(null, null, null, false, false, "The event is not \"Object ...\"!");
      return res;
*****

***** PmEngine.java
    }
    String sUserName = eventCtx.getObjName();
    String sClass = eventCtx.getObjClass();
    if (!sClass.equalsIgnoreCase(PM_CLASS_USER_NAME)) {
      res[0] = new ActOpnd(null, null, null, false, false, "Object class is not \"User\"");
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    String sObjName = eventCtx.getObjName();
    String sObjId = eventCtx.getObjId();

    // If the event is "Object delete", the assoc id is in Ctx2.
    if (sEventName.equalsIgnoreCase("Object delete")) {
      res[0] = new ActOpnd(sObjName, PM_NODE_OATTR, eventCtx.getCtx2(), false, false, null);
      return res;
*****

***** PmEngine.java
    }
    String sUserId = getEntityId(sUserName, PM_NODE_USER);
    if (sUserId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No user \"" + sUserName + "\"");
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    String sActObjId = getEntityId(sObjName, PM_OBJ);
    if (sActObjId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No such object \"" + sObjName + "\"!");
      return res;
*****

***** PmEngine.java
    }
    String sRepName = sUserName + " home rep";
    String sRepId = getEntityId(sRepName, PM_OBJ);
    res[0] = new ActOpnd(sRepName, PM_OBJ, sRepId, false, false, null);
    return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    if (!sActObjId.equalsIgnoreCase(sObjId)) {
      res[0] = new ActOpnd(null, null, null, false, false, "Context's object id is not the actual id!");
      return res;
    }
    String sAssocId = getAssocOattr(sObjId);
    if (sAssocId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "Context's object has no associated object attribute!");
      return res;
    }
    res[0] = new ActOpnd(sObjName, PM_NODE_OATTR, sAssocId, false, false, null);
    return res;
*****

***** PmEngine.java

  // Returns the object which represents the home container of the
  // user passed as argument. Its name is "<user> home rep".
  // Parameters: a user.
  private ActOpnd[] evalFun_obj_rep_of_home_of_user(EventContext eventCtx,
  String sFunType, Vector funArgs) {
***** ..\OLDPMSERVER\PMENGINE.JAVA

  // This function returns the property "homeof=<user>", where <user>
  // is the name of the user just created. The event
  // must be "Create user", the context object must be a user, and the
  // event object class must be "User".
  // Parameters: None.
  private ActOpnd[] evalFun_prop_home_of_new_user(EventContext eventCtx,
  String sFunType, Vector funArgs) {
*****

***** PmEngine.java
    
    if (funArgs.isEmpty() || funArgs.size() != 1) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Incorrect number of arguments for function obj_rep_of_home_of_user");
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    
    String sEventName = eventCtx.getEventName();
    if (!sEventName.equalsIgnoreCase(PM_EVENT_USER_CREATE)) {
      res[0] = new ActOpnd(null, null, null, false, false, "Event is not \"" + PM_EVENT_USER_CREATE + "\"");
      return res;
*****

***** PmEngine.java
    }
    ActOpnd arg = (ActOpnd)funArgs.get(0);
    if (!arg.getType().equalsIgnoreCase(PM_NODE_USER)) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Argument of function obj_rep_of_home_of_user is not a user");
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    String sUserName = eventCtx.getObjName();
    String sClass = eventCtx.getObjClass();
    if (!sClass.equalsIgnoreCase(PM_CLASS_USER_NAME)) {
      res[0] = new ActOpnd(null, null, null, false, false, "Object class is not \"User\"");
      return res;
*****

***** PmEngine.java
    }
    String sUserName = arg.getName();
    String sRepName = sUserName + " home rep";
    String sRepId = getEntityId(sRepName, PM_OBJ);
    res[0] = new ActOpnd(sRepName, PM_OBJ, sRepId, false, false, null);
    return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    String sUserId = getEntityId(sUserName, PM_NODE_USER);
    if (sUserId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No user \"" + sUserName + "\"");
      return res;
    }
    res[0] = new ActOpnd("homeof=" + sUserName, PM_UNKNOWN, null, false, false, null);
    return res;
*****

***** PmEngine.java

  // Like evalFun_obj_rep_of_home_of_new_user, but returns an object attribute.
  // Parameters: None.
  private ActOpnd[] evalFun_oattr_rep_of_home_of_new_user(EventContext eventCtx,
  String sFunType, Vector funArgs) {
***** ..\OLDPMSERVER\PMENGINE.JAVA

  // This function returns the property "nameof=<user>", where <user>
  // is the name of the user just created. The event
  // must be "Create user", the context object must be a user, and the
  // event object class must be "User".
  // Parameters: None.
  private ActOpnd[] evalFun_prop_name_of_new_user(EventContext eventCtx,
  String sFunType, Vector funArgs) {
*****

***** PmEngine.java
    }
    String sRepName = sUserName + " home rep";
    String sRepId = getEntityId(sRepName, PM_NODE_OATTR);
    res[0] = new ActOpnd(sRepName, PM_NODE_OATTR, sRepId, false, false, null);
    return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    res[0] = new ActOpnd("nameof=" + sUserName, PM_UNKNOWN, null, false, false, null);
    return res;
*****

***** PmEngine.java

  // Like evalFun_obj_rep_of_home_of_user, but returns an object attribute.
  // Parameters: a user.
  private ActOpnd[] evalFun_oattr_rep_of_home_of_user(EventContext eventCtx,
  String sFunType, Vector funArgs) {
***** ..\OLDPMSERVER\PMENGINE.JAVA

  // Return the new user when the event is "User create".
  // Parameters: None.
  private ActOpnd[] evalFun_user_new(EventContext eventCtx,
  String sFunType, Vector funArgs) {
*****

***** PmEngine.java
    
    if (funArgs.isEmpty() || funArgs.size() != 1) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Incorrect number of arguments for function oattr_rep_of_home_of_user");
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    
    String sEventName = eventCtx.getEventName();
    if (!sEventName.equalsIgnoreCase(PM_EVENT_USER_CREATE)) {
      res[0] = new ActOpnd(null, null, null, false, false, "Event is not \"" + PM_EVENT_USER_CREATE + "\"");
      return res;
*****

***** PmEngine.java
    }
    ActOpnd arg = (ActOpnd)funArgs.get(0);
    if (!arg.getType().equalsIgnoreCase(PM_NODE_USER)) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Argument of function oattr_rep_of_home_of_user is not a user");
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    String sUserName = eventCtx.getObjName();
    String sClass = eventCtx.getObjClass();
    if (!sClass.equalsIgnoreCase(PM_CLASS_USER_NAME)) {
      res[0] = new ActOpnd(null, null, null, false, false, "Object class is not \"User\"");
      return res;
*****

***** PmEngine.java
    }
    String sUserName = arg.getName();
    String sRepName = sUserName + " home rep";
    String sRepId = getEntityId(sRepName, PM_NODE_OATTR);
    res[0] = new ActOpnd(sRepName, PM_NODE_OATTR, sRepId, false, false, null);
    return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    String sUserId = getEntityId(sUserName, PM_NODE_USER);
    if (sUserId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No user \"" + sUserName + "\"");
      return res;
    }
    res[0] = new ActOpnd(sUserName, PM_NODE_USER, sUserId, false, false, null);
    return res;
*****

***** PmEngine.java

  // Returns the object that represents all discretionary users and attributes.
  // First find the uattr with the property
  // "usersof=discretionary", then add " rep" to its name, and look for an
  // object attribute with this name associated to an object.
  // Parameters: None.
  private ActOpnd[] evalFun_oattr_rep_of_discr_users(EventContext eventCtx,
  String sFunType, Vector funArgs) {
***** ..\OLDPMSERVER\PMENGINE.JAVA

  // Returns the object attribute with the property homeof=<user>,
  // where <user> is the user of the current session.
  // Parameters: None.
  private ActOpnd[] evalFun_oattr_home_of_default_user(EventContext eventCtx,
  String sFunType, Vector funArgs) {
*****

***** PmEngine.java
    
    // Let's find the uattr with the property:
    String sProp = "usersof=discretionary";
    String sUattrId = getEntityWithProperty(PM_NODE_UATTR, sProp);
System.out.println("=============uattr with property " + sProp + " found " + sUattrId);
    
    if (sUattrId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No user attribute with property " + sProp);
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    
    String sSessId = eventCtx.getSessId();
    String sUserId = getSessionUserId(sSessId);
    if (sUserId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No user for session " + sSessId);
      return res;
*****

***** PmEngine.java
    }
    String sUattrName = getEntityName(sUattrId, PM_NODE_UATTR);
    if (sUattrName == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No user attribute with id " + sUattrId);    
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    String sUser = getEntityName(sUserId, PM_NODE_USER);
    if (sUser == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No user with id " + sUserId);
      return res;
*****

***** PmEngine.java
    }
    String sRepName = sUattrName + " rep";
    String sRepId = getEntityId(sRepName, PM_NODE_OATTR);
    if (sRepId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No object attribute " + sRepName);    
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    // Let's find the oattr with the property:
    String sProp = "homeof=" + sUser;
    String sOattrId = getEntityWithProperty(PM_NODE_OATTR, sProp);
System.out.println("=============oattr with property " + sProp + " found " + sOattrId);
    
    if (sOattrId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No object attribute with property " + sProp);
      return res;
*****

***** PmEngine.java
    }
    res[0] = new ActOpnd(sRepName, PM_NODE_OATTR, sRepId, false, false, null);
    return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    String sOattr = getEntityName(sOattrId, PM_NODE_OATTR);
    if (sOattr == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No object attribute with id " + sOattrId);
      return res;
    }
    res[0] = new ActOpnd(sOattr, PM_NODE_OATTR, sOattrId, false, false, null);
    return res;
*****

***** PmEngine.java
  }

  // Returns the user attribute "DAC users".
  // Parameters: None.
  private ActOpnd[] evalFun_uattr_discr_users(EventContext eventCtx,
  String sFunType, Vector funArgs) {
***** ..\OLDPMSERVER\PMENGINE.JAVA
  }
  
  // Returns the object attribute which will be the home container of the
  // new user. Its name is "<user> home",
  // where <user> is the new user. The event name must be "User create",
  // the object name must be the new user name, and the object class
  // must be "User".
  // Parameters: None.
  private ActOpnd[] evalFun_oattr_home_of_new_user(EventContext eventCtx,
  String sFunType, Vector funArgs) {
*****

***** PmEngine.java
    
    // Let's find the uattr with the property:
    String sProp = "usersof=discretionary";
    String sUattrId = getEntityWithProperty(PM_NODE_UATTR, sProp);
System.out.println("=============uattr with property " + sProp + " found " + sUattrId);
    if (sUattrId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No user attribute with property " + sProp);
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    
    String sEventName = eventCtx.getEventName();
    if (!sEventName.equalsIgnoreCase(PM_EVENT_USER_CREATE)) {
      res[0] = new ActOpnd(null, null, null, false, false, "Event is not \"" + PM_EVENT_USER_CREATE + "\"");
      return res;
*****

***** PmEngine.java
    }
    String sUattrName = getEntityName(sUattrId, PM_NODE_UATTR);
    if (sUattrName == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No user attribute with id " + sUattrId);
      return res;
    }      
    res[0] = new ActOpnd(sUattrName, PM_NODE_UATTR, sUattrId, false, false, null);
    return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    String sUserName = eventCtx.getObjName();
    String sClass = eventCtx.getObjClass();
    if (!sClass.equalsIgnoreCase(PM_CLASS_USER_NAME)) {
      res[0] = new ActOpnd(null, null, null, false, false, "Object class is not \"User\"");
      return res;
    }
    String sUserId = getEntityId(sUserName, PM_NODE_USER);
    if (sUserId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No user \"" + sUserName + "\"");
      return res;
    }
    String sHomeName = sUserName + " home";
    String sHomeId = getEntityId(sHomeName, PM_NODE_OATTR);
    res[0] = new ActOpnd(sHomeName, PM_NODE_OATTR, sHomeId, false, false, null);
    return res;
*****

***** PmEngine.java

  // Returns the default user, i.e., the session user.
  // Parameters: None.
  private ActOpnd[] evalFun_user_default(EventContext eventCtx,
  String sFunType, Vector funArgs) {
***** ..\OLDPMSERVER\PMENGINE.JAVA

  // Returns the object attribute which is the home container of the
  // user passed as argument. Its name is "<user> home".
  // Parameters: A user.
  private ActOpnd[] evalFun_oattr_home_of_user(EventContext eventCtx,
  String sFunType, Vector funArgs) {
*****

***** PmEngine.java
    
    String sSessId = eventCtx.getSessId();
    String sUserId = getSessionUserId(sSessId);
    if (sUserId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No user for session " + sSessId);
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    
    if (funArgs.isEmpty() || funArgs.size() != 1) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Incorrect number of arguments for function oattr_home_of_user");
      return res;
*****

***** PmEngine.java
    }
    String sUserName = getEntityName(sUserId, PM_NODE_USER);
    if (sUserName == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No user with id " + sUserId);
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    ActOpnd arg = (ActOpnd)funArgs.get(0);
    if (!arg.getType().equalsIgnoreCase(PM_NODE_USER)) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Argument of function oattr_home_of_user is not a user");
      return res;
*****

***** PmEngine.java
    }
    res[0] = new ActOpnd(sUserName, PM_NODE_USER, sUserId, false, false, null);
    return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    String sUserName = arg.getName();
    String sHomeName = sUserName + " home";
    String sHomeId = getEntityId(sHomeName, PM_NODE_OATTR);
    res[0] = new ActOpnd(sHomeName, PM_NODE_OATTR, sHomeId, false, false, null);
    return res;
*****

***** PmEngine.java
  }
  
  // Returns the name attribute of the new user. Its name is "<user> name",
  // where <user> is the new user. The event name must be "User create",
***** ..\OLDPMSERVER\PMENGINE.JAVA
  }

  // Returns the object that represents the home container of the
  // new user. Its name is "<user> home rep",
  // where <user> is the new user. The event name must be "User create",
*****

***** PmEngine.java
  // Parameters: None.
  private ActOpnd[] evalFun_uattr_name_of_new_user(EventContext eventCtx,
  String sFunType, Vector funArgs) {
***** ..\OLDPMSERVER\PMENGINE.JAVA
  // Parameters: None.
  private ActOpnd[] evalFun_obj_rep_of_home_of_new_user(EventContext eventCtx,
  String sFunType, Vector funArgs) {
*****

***** PmEngine.java
    if (sUserId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "User \"" + sUserName + "\" not yet created");
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    if (sUserId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No user \"" + sUserName + "\"");
      return res;
*****

***** PmEngine.java
    }
    String sAttrName = getUserFullName(sUserId);
    String sAttrId = getEntityId(sAttrName, PM_NODE_UATTR);
    // It's not an error to get a null id for the user name attribute.
    // It might not be created yet. But if it is already created, get the id.
    res[0] = new ActOpnd(sAttrName, PM_NODE_UATTR, sAttrId, false, false, null);
    return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    String sRepName = sUserName + " home rep";
    String sRepId = getEntityId(sRepName, PM_OBJ);
    res[0] = new ActOpnd(sRepName, PM_OBJ, sRepId, false, false, null);
    return res;
*****

***** PmEngine.java

  // Returns the name attribute of a user passed as argument.
  // Its name is "<user> name".
  // Parameters: a user.
  private ActOpnd[] evalFun_uattr_name_of_user(EventContext eventCtx,
  String sFunType, Vector funArgs) {
***** ..\OLDPMSERVER\PMENGINE.JAVA

  // Returns the object which represents the home container of the
  // user passed as argument. Its name is "<user> home rep".
  // Parameters: a user.
  private ActOpnd[] evalFun_obj_rep_of_home_of_user(EventContext eventCtx,
  String sFunType, Vector funArgs) {
*****

***** PmEngine.java
      res[0] = new ActOpnd(null, null, null, false, false,
        "Incorrect number of arguments for function uattr_user_name");
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
      res[0] = new ActOpnd(null, null, null, false, false,
        "Incorrect number of arguments for function obj_rep_of_home_of_user");
      return res;
*****

***** PmEngine.java
      res[0] = new ActOpnd(null, null, null, false, false,
        "The argument of function uattr_user_name is not a user");
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
      res[0] = new ActOpnd(null, null, null, false, false,
        "Argument of function obj_rep_of_home_of_user is not a user");
      return res;
*****

***** PmEngine.java
    }
    String sAttrName = getUserFullName(arg.getId());
    String sAttrId = getEntityId(sAttrName, PM_NODE_UATTR);
    // We may get a null id for the attribute. This is not an error,
    // it might not be created yet. But if it's there, we need the id.
    res[0] = new ActOpnd(sAttrName, PM_NODE_UATTR, sAttrId, false, false, null);
    return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    String sUserName = arg.getName();
    String sRepName = sUserName + " home rep";
    String sRepId = getEntityId(sRepName, PM_OBJ);
    res[0] = new ActOpnd(sRepName, PM_OBJ, sRepId, false, false, null);
    return res;
*****

***** PmEngine.java

  // Returns the property "nameof=<user>", where <user> is a user passed as
  // argument.
  // Parameters: a user.
  private ActOpnd[] evalFun_prop_name_of_user(EventContext eventCtx,
  String sFunType, Vector funArgs) {
***** ..\OLDPMSERVER\PMENGINE.JAVA

  // Like evalFun_obj_rep_of_home_of_new_user, but returns an object attribute.
  // Parameters: None.
  private ActOpnd[] evalFun_oattr_rep_of_home_of_new_user(EventContext eventCtx,
  String sFunType, Vector funArgs) {
*****

***** PmEngine.java
    
    if (funArgs.isEmpty() || funArgs.size() != 1) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Incorrect number of arguments for function prop_user_name");
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    
    String sEventName = eventCtx.getEventName();
    if (!sEventName.equalsIgnoreCase(PM_EVENT_USER_CREATE)) {
      res[0] = new ActOpnd(null, null, null, false, false, "Event is not \"" + PM_EVENT_USER_CREATE + "\"");
      return res;
*****

***** PmEngine.java
    }
    ActOpnd arg = (ActOpnd)funArgs.get(0);
    if (!arg.getType().equalsIgnoreCase(PM_NODE_USER)) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Argument of function uattr_user_name is not a user");
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    String sUserName = eventCtx.getObjName();
    String sClass = eventCtx.getObjClass();
    if (!sClass.equalsIgnoreCase(PM_CLASS_USER_NAME)) {
      res[0] = new ActOpnd(null, null, null, false, false, "Object class is not \"User\"");
      return res;
*****

***** PmEngine.java
    }
    String sProp = "nameof=" + arg.getName();
    res[0] = new ActOpnd(sProp, PM_UNKNOWN, null, false, false, null);
    return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    String sUserId = getEntityId(sUserName, PM_NODE_USER);
    if (sUserId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No user \"" + sUserName + "\"");
      return res;
    }
    String sRepName = sUserName + " home rep";
    String sRepId = getEntityId(sRepName, PM_NODE_OATTR);
    res[0] = new ActOpnd(sRepName, PM_NODE_OATTR, sRepId, false, false, null);
    return res;
*****

***** PmEngine.java

  // Returns a policy with the property "type=discretionary", if one exists.
  // Parameters: None.
  private ActOpnd[] evalFun_pol_discr(EventContext eventCtx,
  String sFunType, Vector funArgs) {
***** ..\OLDPMSERVER\PMENGINE.JAVA

  // Like evalFun_obj_rep_of_home_of_user, but returns an object attribute.
  // Parameters: a user.
  private ActOpnd[] evalFun_oattr_rep_of_home_of_user(EventContext eventCtx,
  String sFunType, Vector funArgs) {
*****

***** PmEngine.java
    
    String sProp = "type=discretionary";
    String sPolId = getEntityWithProperty(PM_NODE_POL, sProp);
System.out.println("=============policy with property " + sProp + " found " + sPolId);
    if (sPolId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No policy with property " + sProp);
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    
    if (funArgs.isEmpty() || funArgs.size() != 1) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Incorrect number of arguments for function oattr_rep_of_home_of_user");
      return res;
*****

***** PmEngine.java
    }
    String sPol = getEntityName(sPolId, PM_NODE_POL);
    if (sPol == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No policy with id " + sPolId);
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    ActOpnd arg = (ActOpnd)funArgs.get(0);
    if (!arg.getType().equalsIgnoreCase(PM_NODE_USER)) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Argument of function oattr_rep_of_home_of_user is not a user");
      return res;
*****

***** PmEngine.java
    }
    res[0] = new ActOpnd(sPol, PM_NODE_POL, sPolId, false, false, null);
    return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    String sUserName = arg.getName();
    String sRepName = sUserName + " home rep";
    String sRepId = getEntityId(sRepName, PM_NODE_OATTR);
    res[0] = new ActOpnd(sRepName, PM_NODE_OATTR, sRepId, false, false, null);
    return res;
*****

***** PmEngine.java
  }
  
  // Returns the user attribute representing the lowest clearance level of the
  // mls policy, if one exists.
  // Parameters: None.
  private ActOpnd[] evalFun_uattr_lowest_level(EventContext eventCtx,
  String sFunType, Vector funArgs) {
***** ..\OLDPMSERVER\PMENGINE.JAVA
  }

  // Returns the object that represents all discretionary users and attributes.
  // First find the uattr with the property
  // "usersof=discretionary", then add " rep" to its name, and look for an
  // object attribute with this name associated to an object.
  // Parameters: None.
  private ActOpnd[] evalFun_oattr_rep_of_discr_users(EventContext eventCtx,
  String sFunType, Vector funArgs) {
*****

***** PmEngine.java
    
    String sProp = "type=mls";
    String sPolId = getEntityWithProperty(PM_NODE_POL, sProp);
System.out.println("=============policy with property " + sProp + " found " + sPolId);
    if (sPolId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No policy with property " + sProp);
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    
    // Let's find the uattr with the property:
    String sProp = "usersof=discretionary";
    String sUattrId = getEntityWithProperty(PM_NODE_UATTR, sProp);
System.out.println("=============uattr with property " + sProp + " found " + sUattrId);
    
    if (sUattrId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No user attribute with property " + sProp);
      return res;
*****

***** PmEngine.java
    }
    String sPolName = getEntityName(sPolId, PM_NODE_POL);
    if (sPolName == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No policy with id " + sPolId);
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    String sUattrName = getEntityName(sUattrId, PM_NODE_UATTR);
    if (sUattrName == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No user attribute with id " + sUattrId);    
      return res;
*****

***** PmEngine.java
    }
    String sPrefix = "levels=";
    String sLevelsProp = getPropertyWithPrefix(sPrefix, sPolId, PM_NODE_POL);
    if (sLevelsProp == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No levels specified in policy " + sPolName);
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    String sRepName = sUattrName + " rep";
    String sRepId = getEntityId(sRepName, PM_NODE_OATTR);
    if (sRepId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No object attribute " + sRepName);    
      return res;
*****

***** PmEngine.java
    }
    String sLevels = sLevelsProp.substring(sPrefix.length());
    String[] pieces = sLevels.split(PM_LIST_MEMBER_SEP);
    if (pieces.length < 1 || pieces[0] == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No lowest level specified in policy " + sPolName);
      return res;
    }
    String sUattrId = getEntityId(pieces[0], PM_NODE_UATTR);
    if (sUattrId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No user attribute at lowest level " + pieces[0]);
      return res;
    }
    res[0] = new ActOpnd(pieces[0], PM_NODE_UATTR, sUattrId, false, false, null);
    return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    res[0] = new ActOpnd(sRepName, PM_NODE_OATTR, sRepId, false, false, null);
    return res;
*****

***** PmEngine.java

  // Returns a policy with the property "type=identity", if one exists.
  // Parameters: None.
  private ActOpnd[] evalFun_pol_id(EventContext eventCtx,
  String sFunType, Vector funArgs) {
***** ..\OLDPMSERVER\PMENGINE.JAVA

  // Returns the user attribute "DAC users".
  // Parameters: None.
  private ActOpnd[] evalFun_uattr_discr_users(EventContext eventCtx,
  String sFunType, Vector funArgs) {
*****

***** PmEngine.java
    
    String sProp = "type=identity";
    String sPolId = getEntityWithProperty(PM_NODE_POL, sProp);
System.out.println("=============policy with property " + sProp + " found " + sPolId);
    if (sPolId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No policy with property " + sProp);
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    
    // Let's find the uattr with the property:
    String sProp = "usersof=discretionary";
    String sUattrId = getEntityWithProperty(PM_NODE_UATTR, sProp);
System.out.println("=============uattr with property " + sProp + " found " + sUattrId);
    if (sUattrId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No user attribute with property " + sProp);
      return res;
*****

***** PmEngine.java
    }
    String sPol = getEntityName(sPolId, PM_NODE_POL);
    if (sPol == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No policy with id " + sPolId);
      return res;
    }
    res[0] = new ActOpnd(sPol, PM_NODE_POL, sPolId, false, false, null);
    return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    String sUattrName = getEntityName(sUattrId, PM_NODE_UATTR);
    if (sUattrName == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No user attribute with id " + sUattrId);
      return res;
    }      
    res[0] = new ActOpnd(sUattrName, PM_NODE_UATTR, sUattrId, false, false, null);
    return res;
*****

***** PmEngine.java
  }
  
  // Returns a policy with the property passed as the sole argument.
  // Parameters: A property.
  private ActOpnd[] evalFun_pol_with_prop(EventContext eventCtx,
  String sFunType, Vector funArgs) {
***** ..\OLDPMSERVER\PMENGINE.JAVA
  }

  // Returns the default user, i.e., the session user.
  // Parameters: None.
  private ActOpnd[] evalFun_user_default(EventContext eventCtx,
  String sFunType, Vector funArgs) {
*****

***** PmEngine.java
    
    if (funArgs.isEmpty() || funArgs.size() != 1) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Incorrect number of arguments for function pol_with_prop");
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    
    String sSessId = eventCtx.getSessId();
    String sUserId = getSessionUserId(sSessId);
    if (sUserId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No user for session " + sSessId);
      return res;
*****

***** PmEngine.java
    }
    ActOpnd arg = (ActOpnd)funArgs.get(0);
    String sProp = arg.getName();
    String sPolId = getEntityWithProperty(PM_NODE_POL, sProp);
System.out.println("=============policy with property " + sProp + " found " + sPolId);
    if (sPolId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No policy with property " + sProp);
      return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    String sUserName = getEntityName(sUserId, PM_NODE_USER);
    if (sUserName == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No user with id " + sUserId);
      return res;
*****

***** PmEngine.java
    }
    String sPol = getEntityName(sPolId, PM_NODE_POL);
    if (sPol == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No policy with id " + sPolId);
      return res;
    }
    res[0] = new ActOpnd(sPol, PM_NODE_POL, sPolId, false, false, null);
    return res;
***** ..\OLDPMSERVER\PMENGINE.JAVA
    }
    res[0] = new ActOpnd(sUserName, PM_NODE_USER, sUserId, false, false, null);
    return res;
*****

Resync Failed.  Files are too different.
***** PmEngine.java
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  private Object applyActionAssignLike(EventContext eventCtx, String sActionId) {
    return success();
  }
  
  private Object applyActionGrant(EventContext eventCtx, String sActionId) {
    try {
      Attributes actAttrs = ctx.getAttributes("CN=" + sActionId + "," + sRuleContainerDN);
      Attribute attr = actAttrs.get("pmOpnd1");
      if (attr == null) return failure("No operand 1 in \"Grant\" action " + sActionId);
      HashSet hsOpnd1 = new HashSet();
      String sLastError = null;
      for (NamingEnumeration enum = attr.getAll(); enum.hasMore(); ) {
        String sOpndId = (String)enum.next();
        // Get the runtime action operand and insert it into the HashSet of
        // first operands. Most of the times, the run-time operand is the same as the
        // compile-time operand. A function operand at run-time is different.
        ActOpnd[] actOpnds = evalOpnd(eventCtx, sOpndId);
        sLastError = actOpnds[0].getError();
        if (sLastError != null) {
          System.out.println("Last error when evaluating operand 1: " + sLastError);
          continue;
        }
        for (int i = 0; i < actOpnds.length; i++) hsOpnd1.add(actOpnds[i]);
      }
      printOpndSet(hsOpnd1, "Set of first operands in \"Grant\"");
      if (hsOpnd1.isEmpty())
        return failure("No first operands in grant. Last error was: " + sLastError);
      
      attr = actAttrs.get("pmOpnd2");
      if (attr == null) return failure("No operand 2 in \"Grant\" action " + sActionId);
      HashSet hsOpnd2 = new HashSet();
      for (NamingEnumeration enum = attr.getAll(); enum.hasMore(); ) {
        String sOpndId = (String)enum.next();
        ActOpnd[] actOpnds = evalOpnd(eventCtx, sOpndId);
        sLastError = actOpnds[0].getError();
        if (sLastError != null) {
          System.out.println("Last error when evaluating operand 2: " + sLastError);
          continue;
        }
        for (int i = 0; i < actOpnds.length; i++) hsOpnd2.add(actOpnds[i]);
      }
      printOpndSet(hsOpnd2, "Set of second operands in \"Grant\"");
      if (hsOpnd2.isEmpty())
        return failure("No second operands in \"Grant\". Last error was: " + sLastError);

      attr = actAttrs.get("pmOpnd3");
      if (attr == null) return failure("No operand 3 in \"Grant\" action " + sActionId);
      HashSet hsOpnd3 = new HashSet();
      for (NamingEnumeration enum = attr.getAll(); enum.hasMore(); ) {
        String sOpndId = (String)enum.next();
        ActOpnd[] actOpnds = evalOpnd(eventCtx, sOpndId);
        sLastError = actOpnds[0].getError();
        if (sLastError != null) {
          System.out.println("Last error when evaluating operand 3: " + sLastError);
          continue;
        }
        for (int i = 0; i < actOpnds.length; i++) hsOpnd3.add(actOpnds[i]);
      }
      printOpndSet(hsOpnd3, "Set of third operands in \"Grant\"");
      if (hsOpnd3.isEmpty())
        return failure("No third operands in \"Grant\". Last error was: " + sLastError);

      // Generate a name for the operation set.
      Random random = new Random();
      byte[] bytes = new byte[4];
      random.nextBytes(bytes);
      String sOpset = byteArray2HexString(bytes);
      System.out.println("============opset name is " + sOpset);
      // Create an empty opset and assign it to connector.
      ArrayList res = (ArrayList)addOpsetAndOpInternal(sOpset, null, sOpset,
        sOpset, null, null, null, null, null);
      if (isFailure(res)) return res;
      // Get the opset name and id from the result.
***** ..\OLDPMSERVER\PMENGINE.JAVA
  
  // Returns the name attribute of the new user. Its name is "<user> name",
  // where <user> is the new user. The event name must be "User create",
  // the object name must be the new user name, and the object class
  // must be "User".
  // Parameters: None.
  private ActOpnd[] evalFun_uattr_name_of_new_user(EventContext eventCtx,
  String sFunType, Vector funArgs) {
    ActOpnd[] res = new ActOpnd[1];
    
    String sEventName = eventCtx.getEventName();
    if (!sEventName.equalsIgnoreCase(PM_EVENT_USER_CREATE)) {
      res[0] = new ActOpnd(null, null, null, false, false, "Event is not \"" + PM_EVENT_USER_CREATE + "\"");
      return res;
    }
    String sUserName = eventCtx.getObjName();
    String sClass = eventCtx.getObjClass();
    if (!sClass.equalsIgnoreCase(PM_CLASS_USER_NAME)) {
      res[0] = new ActOpnd(null, null, null, false, false, "Object class is not \"User\"");
      return res;
    }
    String sUserId = getEntityId(sUserName, PM_NODE_USER);
    if (sUserId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "User \"" + sUserName + "\" not yet created");
      return res;
    }
    String sAttrName = getUserFullName(sUserId);
    String sAttrId = getEntityId(sAttrName, PM_NODE_UATTR);
    // It's not an error to get a null id for the user name attribute.
    // It might not be created yet. But if it is already created, get the id.
    res[0] = new ActOpnd(sAttrName, PM_NODE_UATTR, sAttrId, false, false, null);
    return res;
  }

  // Returns the name attribute of a user passed as argument.
  // Its name is "<user> name".
  // Parameters: a user.
  private ActOpnd[] evalFun_uattr_name_of_user(EventContext eventCtx,
  String sFunType, Vector funArgs) {
    ActOpnd[] res = new ActOpnd[1];
    
    if (funArgs.isEmpty() || funArgs.size() != 1) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Incorrect number of arguments for function uattr_user_name");
      return res;
    }
    ActOpnd arg = (ActOpnd)funArgs.get(0);
    if (!arg.getType().equalsIgnoreCase(PM_NODE_USER)) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "The argument of function uattr_user_name is not a user");
      return res;
    }
    String sAttrName = getUserFullName(arg.getId());
    String sAttrId = getEntityId(sAttrName, PM_NODE_UATTR);
    // We may get a null id for the attribute. This is not an error,
    // it might not be created yet. But if it's there, we need the id.
    res[0] = new ActOpnd(sAttrName, PM_NODE_UATTR, sAttrId, false, false, null);
    return res;
  }

  // Returns the property "nameof=<user>", where <user> is a user passed as
  // argument.
  // Parameters: a user.
  private ActOpnd[] evalFun_prop_name_of_user(EventContext eventCtx,
  String sFunType, Vector funArgs) {
    ActOpnd[] res = new ActOpnd[1];
    
    if (funArgs.isEmpty() || funArgs.size() != 1) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Incorrect number of arguments for function prop_user_name");
      return res;
    }
    ActOpnd arg = (ActOpnd)funArgs.get(0);
    if (!arg.getType().equalsIgnoreCase(PM_NODE_USER)) {
      res[0] = new ActOpnd(null, null, null, false, false,
        "Argument of function uattr_user_name is not a user");
      return res;
    }
    String sProp = "nameof=" + arg.getName();
    res[0] = new ActOpnd(sProp, PM_UNKNOWN, null, false, false, null);
    return res;
  }

  // Returns a policy with the property "type=discretionary", if one exists.
  // Parameters: None.
  private ActOpnd[] evalFun_pol_discr(EventContext eventCtx,
  String sFunType, Vector funArgs) {
    ActOpnd[] res = new ActOpnd[1];
    
    String sProp = "type=discretionary";
    String sPolId = getEntityWithProperty(PM_NODE_POL, sProp);
System.out.println("=============policy with property " + sProp + " found " + sPolId);
    if (sPolId == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No policy with property " + sProp);
      return res;
    }
    String sPol = getEntityName(sPolId, PM_NODE_POL);
    if (sPol == null) {
      res[0] = new ActOpnd(null, null, null, false, false, "No policy with id " + sPolId);
      return res;
*****

